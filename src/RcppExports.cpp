// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// K2_Ep_rcpp
double K2_Ep_rcpp(const double& u);
RcppExport SEXP _MYHfusionRcpp_K2_Ep_rcpp(SEXP uSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type u(uSEXP);
    rcpp_result_gen = Rcpp::wrap(K2_Ep_rcpp(u));
    return rcpp_result_gen;
END_RCPP
}
// K2_Ep_diff1_rcpp
double K2_Ep_diff1_rcpp(const double& u);
RcppExport SEXP _MYHfusionRcpp_K2_Ep_diff1_rcpp(SEXP uSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type u(uSEXP);
    rcpp_result_gen = Rcpp::wrap(K2_Ep_diff1_rcpp(u));
    return rcpp_result_gen;
END_RCPP
}
// K2_Ep_diff2_rcpp
double K2_Ep_diff2_rcpp(const double& u);
RcppExport SEXP _MYHfusionRcpp_K2_Ep_diff2_rcpp(SEXP uSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type u(uSEXP);
    rcpp_result_gen = Rcpp::wrap(K2_Ep_diff2_rcpp(u));
    return rcpp_result_gen;
END_RCPP
}
// K2_Bw_rcpp
double K2_Bw_rcpp(const double& u);
RcppExport SEXP _MYHfusionRcpp_K2_Bw_rcpp(SEXP uSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type u(uSEXP);
    rcpp_result_gen = Rcpp::wrap(K2_Bw_rcpp(u));
    return rcpp_result_gen;
END_RCPP
}
// K2_Bw_diff1_rcpp
double K2_Bw_diff1_rcpp(const double& u);
RcppExport SEXP _MYHfusionRcpp_K2_Bw_diff1_rcpp(SEXP uSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type u(uSEXP);
    rcpp_result_gen = Rcpp::wrap(K2_Bw_diff1_rcpp(u));
    return rcpp_result_gen;
END_RCPP
}
// K2_Bw_diff2_rcpp
double K2_Bw_diff2_rcpp(const double& u);
RcppExport SEXP _MYHfusionRcpp_K2_Bw_diff2_rcpp(SEXP uSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type u(uSEXP);
    rcpp_result_gen = Rcpp::wrap(K2_Bw_diff2_rcpp(u));
    return rcpp_result_gen;
END_RCPP
}
// K4_Bw_rcpp
double K4_Bw_rcpp(const double& u);
RcppExport SEXP _MYHfusionRcpp_K4_Bw_rcpp(SEXP uSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type u(uSEXP);
    rcpp_result_gen = Rcpp::wrap(K4_Bw_rcpp(u));
    return rcpp_result_gen;
END_RCPP
}
// K4_Bw_diff1_rcpp
double K4_Bw_diff1_rcpp(const double& u);
RcppExport SEXP _MYHfusionRcpp_K4_Bw_diff1_rcpp(SEXP uSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type u(uSEXP);
    rcpp_result_gen = Rcpp::wrap(K4_Bw_diff1_rcpp(u));
    return rcpp_result_gen;
END_RCPP
}
// K4_Bw_diff2_rcpp
double K4_Bw_diff2_rcpp(const double& u);
RcppExport SEXP _MYHfusionRcpp_K4_Bw_diff2_rcpp(SEXP uSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type u(uSEXP);
    rcpp_result_gen = Rcpp::wrap(K4_Bw_diff2_rcpp(u));
    return rcpp_result_gen;
END_RCPP
}
// KDE_K2Ep_rcpp
arma::vec KDE_K2Ep_rcpp(const arma::mat& X, const arma::mat& x, const arma::vec& h);
RcppExport SEXP _MYHfusionRcpp_KDE_K2Ep_rcpp(SEXP XSEXP, SEXP xSEXP, SEXP hSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type h(hSEXP);
    rcpp_result_gen = Rcpp::wrap(KDE_K2Ep_rcpp(X, x, h));
    return rcpp_result_gen;
END_RCPP
}
// KDE_K2Ep_w_rcpp
arma::vec KDE_K2Ep_w_rcpp(const arma::mat& X, const arma::mat& x, const arma::vec& h, const arma::vec& w);
RcppExport SEXP _MYHfusionRcpp_KDE_K2Ep_w_rcpp(SEXP XSEXP, SEXP xSEXP, SEXP hSEXP, SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type h(hSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type w(wSEXP);
    rcpp_result_gen = Rcpp::wrap(KDE_K2Ep_w_rcpp(X, x, h, w));
    return rcpp_result_gen;
END_RCPP
}
// KDE_K2Bw_rcpp
arma::vec KDE_K2Bw_rcpp(const arma::mat& X, const arma::mat& x, const arma::vec& h);
RcppExport SEXP _MYHfusionRcpp_KDE_K2Bw_rcpp(SEXP XSEXP, SEXP xSEXP, SEXP hSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type h(hSEXP);
    rcpp_result_gen = Rcpp::wrap(KDE_K2Bw_rcpp(X, x, h));
    return rcpp_result_gen;
END_RCPP
}
// KDE_K2Bw_w_rcpp
arma::vec KDE_K2Bw_w_rcpp(const arma::mat& X, const arma::mat& x, const arma::vec& h, const arma::vec& w);
RcppExport SEXP _MYHfusionRcpp_KDE_K2Bw_w_rcpp(SEXP XSEXP, SEXP xSEXP, SEXP hSEXP, SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type h(hSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type w(wSEXP);
    rcpp_result_gen = Rcpp::wrap(KDE_K2Bw_w_rcpp(X, x, h, w));
    return rcpp_result_gen;
END_RCPP
}
// KDE_K4Bw_rcpp
arma::vec KDE_K4Bw_rcpp(const arma::mat& X, const arma::mat& x, const arma::vec& h);
RcppExport SEXP _MYHfusionRcpp_KDE_K4Bw_rcpp(SEXP XSEXP, SEXP xSEXP, SEXP hSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type h(hSEXP);
    rcpp_result_gen = Rcpp::wrap(KDE_K4Bw_rcpp(X, x, h));
    return rcpp_result_gen;
END_RCPP
}
// KDE_K4Bw_w_rcpp
arma::vec KDE_K4Bw_w_rcpp(const arma::mat& X, const arma::mat& x, const arma::vec& h, const arma::vec& w);
RcppExport SEXP _MYHfusionRcpp_KDE_K4Bw_w_rcpp(SEXP XSEXP, SEXP xSEXP, SEXP hSEXP, SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type h(hSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type w(wSEXP);
    rcpp_result_gen = Rcpp::wrap(KDE_K4Bw_w_rcpp(X, x, h, w));
    return rcpp_result_gen;
END_RCPP
}
// K2_Ep_rcpp_v1
double K2_Ep_rcpp_v1(const double& u);
RcppExport SEXP _MYHfusionRcpp_K2_Ep_rcpp_v1(SEXP uSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type u(uSEXP);
    rcpp_result_gen = Rcpp::wrap(K2_Ep_rcpp_v1(u));
    return rcpp_result_gen;
END_RCPP
}
// lL_normal_rcpp
double lL_normal_rcpp(const arma::mat& X, const arma::vec& Y, const double& alpha, const arma::vec& beta, const double& sigma);
RcppExport SEXP _MYHfusionRcpp_lL_normal_rcpp(SEXP XSEXP, SEXP YSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(lL_normal_rcpp(X, Y, alpha, beta, sigma));
    return rcpp_result_gen;
END_RCPP
}
// lL_normal_w_rcpp
double lL_normal_w_rcpp(const arma::mat& X, const arma::vec& Y, const double& alpha, const arma::vec& beta, const double& sigma, const arma::vec& w);
RcppExport SEXP _MYHfusionRcpp_lL_normal_w_rcpp(SEXP XSEXP, SEXP YSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP sigmaSEXP, SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type w(wSEXP);
    rcpp_result_gen = Rcpp::wrap(lL_normal_w_rcpp(X, Y, alpha, beta, sigma, w));
    return rcpp_result_gen;
END_RCPP
}
// diff_lL_normal_rcpp
List diff_lL_normal_rcpp(const arma::mat& X, const arma::vec& Y, const double& alpha, const arma::vec& beta, const double& sigma);
RcppExport SEXP _MYHfusionRcpp_diff_lL_normal_rcpp(SEXP XSEXP, SEXP YSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(diff_lL_normal_rcpp(X, Y, alpha, beta, sigma));
    return rcpp_result_gen;
END_RCPP
}
// lL_logistic_rcpp
double lL_logistic_rcpp(const arma::mat& X, const arma::vec& Y, const double& alpha, const arma::vec& beta);
RcppExport SEXP _MYHfusionRcpp_lL_logistic_rcpp(SEXP XSEXP, SEXP YSEXP, SEXP alphaSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(lL_logistic_rcpp(X, Y, alpha, beta));
    return rcpp_result_gen;
END_RCPP
}
// lL_logistic_w_rcpp
double lL_logistic_w_rcpp(const arma::mat& X, const arma::vec& Y, const double& alpha, const arma::vec& beta, const arma::vec& w);
RcppExport SEXP _MYHfusionRcpp_lL_logistic_w_rcpp(SEXP XSEXP, SEXP YSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type w(wSEXP);
    rcpp_result_gen = Rcpp::wrap(lL_logistic_w_rcpp(X, Y, alpha, beta, w));
    return rcpp_result_gen;
END_RCPP
}
// diff_lL_logistic_rcpp
List diff_lL_logistic_rcpp(const arma::mat& X, const arma::vec& Y, const double& alpha, const arma::vec& beta);
RcppExport SEXP _MYHfusionRcpp_diff_lL_logistic_rcpp(SEXP XSEXP, SEXP YSEXP, SEXP alphaSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(diff_lL_logistic_rcpp(X, Y, alpha, beta));
    return rcpp_result_gen;
END_RCPP
}
// lL_Gamma_rcpp
double lL_Gamma_rcpp(const arma::mat& X, const arma::vec& Y, const double& alpha, const arma::vec& beta, const double& nu);
RcppExport SEXP _MYHfusionRcpp_lL_Gamma_rcpp(SEXP XSEXP, SEXP YSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP nuSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type nu(nuSEXP);
    rcpp_result_gen = Rcpp::wrap(lL_Gamma_rcpp(X, Y, alpha, beta, nu));
    return rcpp_result_gen;
END_RCPP
}
// lL_Gamma_w_rcpp
double lL_Gamma_w_rcpp(const arma::mat& X, const arma::vec& Y, const double& alpha, const arma::vec& beta, const double& nu, const arma::vec& w);
RcppExport SEXP _MYHfusionRcpp_lL_Gamma_w_rcpp(SEXP XSEXP, SEXP YSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP nuSEXP, SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type w(wSEXP);
    rcpp_result_gen = Rcpp::wrap(lL_Gamma_w_rcpp(X, Y, alpha, beta, nu, w));
    return rcpp_result_gen;
END_RCPP
}
// diff_lL_Gamma_rcpp
List diff_lL_Gamma_rcpp(const arma::mat& X, const arma::vec& Y, const double& alpha, const arma::vec& beta, const double& nu);
RcppExport SEXP _MYHfusionRcpp_diff_lL_Gamma_rcpp(SEXP XSEXP, SEXP YSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP nuSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type nu(nuSEXP);
    rcpp_result_gen = Rcpp::wrap(diff_lL_Gamma_rcpp(X, Y, alpha, beta, nu));
    return rcpp_result_gen;
END_RCPP
}
// lL_binomial_rcpp
double lL_binomial_rcpp(const arma::mat& X, const arma::vec& Y, const double& alpha, const arma::vec& beta, const size_t& N);
RcppExport SEXP _MYHfusionRcpp_lL_binomial_rcpp(SEXP XSEXP, SEXP YSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const size_t& >::type N(NSEXP);
    rcpp_result_gen = Rcpp::wrap(lL_binomial_rcpp(X, Y, alpha, beta, N));
    return rcpp_result_gen;
END_RCPP
}
// lL_binomial_w_rcpp
double lL_binomial_w_rcpp(const arma::mat& X, const arma::vec& Y, const double& alpha, const arma::vec& beta, const size_t& N, const arma::vec& w);
RcppExport SEXP _MYHfusionRcpp_lL_binomial_w_rcpp(SEXP XSEXP, SEXP YSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP NSEXP, SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const size_t& >::type N(NSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type w(wSEXP);
    rcpp_result_gen = Rcpp::wrap(lL_binomial_w_rcpp(X, Y, alpha, beta, N, w));
    return rcpp_result_gen;
END_RCPP
}
// diff_lL_binomial_rcpp
List diff_lL_binomial_rcpp(const arma::mat& X, const arma::vec& Y, const double& alpha, const arma::vec& beta, const size_t& N);
RcppExport SEXP _MYHfusionRcpp_diff_lL_binomial_rcpp(SEXP XSEXP, SEXP YSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const size_t& >::type N(NSEXP);
    rcpp_result_gen = Rcpp::wrap(diff_lL_binomial_rcpp(X, Y, alpha, beta, N));
    return rcpp_result_gen;
END_RCPP
}
// lL_Poisson_rcpp
double lL_Poisson_rcpp(const arma::mat& X, const arma::vec& Y, const double& alpha, const arma::vec& beta);
RcppExport SEXP _MYHfusionRcpp_lL_Poisson_rcpp(SEXP XSEXP, SEXP YSEXP, SEXP alphaSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(lL_Poisson_rcpp(X, Y, alpha, beta));
    return rcpp_result_gen;
END_RCPP
}
// lL_Poisson_w_rcpp
double lL_Poisson_w_rcpp(const arma::mat& X, const arma::vec& Y, const double& alpha, const arma::vec& beta, const arma::vec& w);
RcppExport SEXP _MYHfusionRcpp_lL_Poisson_w_rcpp(SEXP XSEXP, SEXP YSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type w(wSEXP);
    rcpp_result_gen = Rcpp::wrap(lL_Poisson_w_rcpp(X, Y, alpha, beta, w));
    return rcpp_result_gen;
END_RCPP
}
// diff_lL_Poisson_rcpp
List diff_lL_Poisson_rcpp(const arma::mat& X, const arma::vec& Y, const double& alpha, const arma::vec& beta);
RcppExport SEXP _MYHfusionRcpp_diff_lL_Poisson_rcpp(SEXP XSEXP, SEXP YSEXP, SEXP alphaSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(diff_lL_Poisson_rcpp(X, Y, alpha, beta));
    return rcpp_result_gen;
END_RCPP
}
// lL_normal_rcpp_fun
double lL_normal_rcpp_fun(const arma::mat& X, const arma::vec& Y, const double& alpha, const arma::vec& beta, const double& sigma);
RcppExport SEXP _MYHfusionRcpp_lL_normal_rcpp_fun(SEXP XSEXP, SEXP YSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(lL_normal_rcpp_fun(X, Y, alpha, beta, sigma));
    return rcpp_result_gen;
END_RCPP
}
// lL_normal_w_rcpp_fun
double lL_normal_w_rcpp_fun(const arma::mat& X, const arma::vec& Y, const double& alpha, const arma::vec& beta, const double& sigma, const arma::vec& w);
RcppExport SEXP _MYHfusionRcpp_lL_normal_w_rcpp_fun(SEXP XSEXP, SEXP YSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP sigmaSEXP, SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type w(wSEXP);
    rcpp_result_gen = Rcpp::wrap(lL_normal_w_rcpp_fun(X, Y, alpha, beta, sigma, w));
    return rcpp_result_gen;
END_RCPP
}
// diff_lL_normal_rcpp_v1
List diff_lL_normal_rcpp_v1(const arma::mat& X, const arma::vec& Y, const double& alpha, const arma::vec& beta, const double& sigma);
RcppExport SEXP _MYHfusionRcpp_diff_lL_normal_rcpp_v1(SEXP XSEXP, SEXP YSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(diff_lL_normal_rcpp_v1(X, Y, alpha, beta, sigma));
    return rcpp_result_gen;
END_RCPP
}
// AD_EY_normal_Lagrange_rcpp
List AD_EY_normal_Lagrange_rcpp(const arma::mat& X, const double& alpha, const arma::vec& beta, const double& sigma, const double& phi, const double& eta);
RcppExport SEXP _MYHfusionRcpp_AD_EY_normal_Lagrange_rcpp(SEXP XSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP sigmaSEXP, SEXP phiSEXP, SEXP etaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const double& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const double& >::type eta(etaSEXP);
    rcpp_result_gen = Rcpp::wrap(AD_EY_normal_Lagrange_rcpp(X, alpha, beta, sigma, phi, eta));
    return rcpp_result_gen;
END_RCPP
}
// AD_EY_normal_SolveLagrange_rcpp
List AD_EY_normal_SolveLagrange_rcpp(const arma::mat& X, const double& alpha, const arma::vec& beta, const double& sigma, const double& phi, const double& eta_initial, const size_t& iter_max, const double& step_rate, const size_t& step_max, const double& tol);
RcppExport SEXP _MYHfusionRcpp_AD_EY_normal_SolveLagrange_rcpp(SEXP XSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP sigmaSEXP, SEXP phiSEXP, SEXP eta_initialSEXP, SEXP iter_maxSEXP, SEXP step_rateSEXP, SEXP step_maxSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const double& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const double& >::type eta_initial(eta_initialSEXP);
    Rcpp::traits::input_parameter< const size_t& >::type iter_max(iter_maxSEXP);
    Rcpp::traits::input_parameter< const double& >::type step_rate(step_rateSEXP);
    Rcpp::traits::input_parameter< const size_t& >::type step_max(step_maxSEXP);
    Rcpp::traits::input_parameter< const double& >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(AD_EY_normal_SolveLagrange_rcpp(X, alpha, beta, sigma, phi, eta_initial, iter_max, step_rate, step_max, tol));
    return rcpp_result_gen;
END_RCPP
}
// AD_EY_normal_rcpp
List AD_EY_normal_rcpp(const arma::mat& X, const double& alpha, const arma::vec& beta, const double& sigma, const double& phi);
RcppExport SEXP _MYHfusionRcpp_AD_EY_normal_rcpp(SEXP XSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP sigmaSEXP, SEXP phiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const double& >::type phi(phiSEXP);
    rcpp_result_gen = Rcpp::wrap(AD_EY_normal_rcpp(X, alpha, beta, sigma, phi));
    return rcpp_result_gen;
END_RCPP
}
// ADvar_EY_normal_rcpp
List ADvar_EY_normal_rcpp(const arma::mat& X, const double& alpha, const arma::vec& beta, const double& sigma, const double& phi, const double& eta);
RcppExport SEXP _MYHfusionRcpp_ADvar_EY_normal_rcpp(SEXP XSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP sigmaSEXP, SEXP phiSEXP, SEXP etaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const double& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const double& >::type eta(etaSEXP);
    rcpp_result_gen = Rcpp::wrap(ADvar_EY_normal_rcpp(X, alpha, beta, sigma, phi, eta));
    return rcpp_result_gen;
END_RCPP
}
// AD_EXsubY_normal_Lagrange_rcpp
List AD_EXsubY_normal_Lagrange_rcpp(const arma::mat& X, const double& alpha, const arma::vec& beta, const double& sigma, const arma::mat& phi, const arma::mat& y_pts, const arma::vec& eta);
RcppExport SEXP _MYHfusionRcpp_AD_EXsubY_normal_Lagrange_rcpp(SEXP XSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP sigmaSEXP, SEXP phiSEXP, SEXP y_ptsSEXP, SEXP etaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type y_pts(y_ptsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type eta(etaSEXP);
    rcpp_result_gen = Rcpp::wrap(AD_EXsubY_normal_Lagrange_rcpp(X, alpha, beta, sigma, phi, y_pts, eta));
    return rcpp_result_gen;
END_RCPP
}
// AD_EXsubY_normal_SolveLagrange_rcpp
List AD_EXsubY_normal_SolveLagrange_rcpp(const arma::mat& X, const double& alpha, const arma::vec& beta, const double& sigma, const arma::mat& phi, const arma::mat& y_pts, const arma::vec& eta_initial, const size_t& iter_max, const double& step_rate, const size_t& step_max, const double& tol);
RcppExport SEXP _MYHfusionRcpp_AD_EXsubY_normal_SolveLagrange_rcpp(SEXP XSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP sigmaSEXP, SEXP phiSEXP, SEXP y_ptsSEXP, SEXP eta_initialSEXP, SEXP iter_maxSEXP, SEXP step_rateSEXP, SEXP step_maxSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type y_pts(y_ptsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type eta_initial(eta_initialSEXP);
    Rcpp::traits::input_parameter< const size_t& >::type iter_max(iter_maxSEXP);
    Rcpp::traits::input_parameter< const double& >::type step_rate(step_rateSEXP);
    Rcpp::traits::input_parameter< const size_t& >::type step_max(step_maxSEXP);
    Rcpp::traits::input_parameter< const double& >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(AD_EXsubY_normal_SolveLagrange_rcpp(X, alpha, beta, sigma, phi, y_pts, eta_initial, iter_max, step_rate, step_max, tol));
    return rcpp_result_gen;
END_RCPP
}
// AD_EXsubY_normal_rcpp
List AD_EXsubY_normal_rcpp(const arma::mat& X, const double& alpha, const arma::vec& beta, const double& sigma, const arma::mat& phi, const arma::mat& y_pts);
RcppExport SEXP _MYHfusionRcpp_AD_EXsubY_normal_rcpp(SEXP XSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP sigmaSEXP, SEXP phiSEXP, SEXP y_ptsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type y_pts(y_ptsSEXP);
    rcpp_result_gen = Rcpp::wrap(AD_EXsubY_normal_rcpp(X, alpha, beta, sigma, phi, y_pts));
    return rcpp_result_gen;
END_RCPP
}
// ADvar_EXsubY_normal_rcpp
List ADvar_EXsubY_normal_rcpp(const arma::mat& X, const double& alpha, const arma::vec& beta, const double& sigma, const arma::mat& phi, const arma::mat& y_pts, const arma::vec& eta);
RcppExport SEXP _MYHfusionRcpp_ADvar_EXsubY_normal_rcpp(SEXP XSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP sigmaSEXP, SEXP phiSEXP, SEXP y_ptsSEXP, SEXP etaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type y_pts(y_ptsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type eta(etaSEXP);
    rcpp_result_gen = Rcpp::wrap(ADvar_EXsubY_normal_rcpp(X, alpha, beta, sigma, phi, y_pts, eta));
    return rcpp_result_gen;
END_RCPP
}
// AD_EYsubX_normal_Lagrange_rcpp
List AD_EYsubX_normal_Lagrange_rcpp(const arma::mat& X, const double& alpha, const arma::vec& beta, const double& sigma, const arma::vec& phi, const arma::umat& inclusion, const arma::vec& eta);
RcppExport SEXP _MYHfusionRcpp_AD_EYsubX_normal_Lagrange_rcpp(SEXP XSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP sigmaSEXP, SEXP phiSEXP, SEXP inclusionSEXP, SEXP etaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const arma::umat& >::type inclusion(inclusionSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type eta(etaSEXP);
    rcpp_result_gen = Rcpp::wrap(AD_EYsubX_normal_Lagrange_rcpp(X, alpha, beta, sigma, phi, inclusion, eta));
    return rcpp_result_gen;
END_RCPP
}
// AD_EYsubX_normal_SolveLagrange_rcpp
List AD_EYsubX_normal_SolveLagrange_rcpp(const arma::mat& X, const double& alpha, const arma::vec& beta, const double& sigma, const arma::vec& phi, const arma::umat& inclusion, const arma::vec& eta_initial, const size_t& iter_max, const double& step_rate, const size_t& step_max, const double& tol);
RcppExport SEXP _MYHfusionRcpp_AD_EYsubX_normal_SolveLagrange_rcpp(SEXP XSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP sigmaSEXP, SEXP phiSEXP, SEXP inclusionSEXP, SEXP eta_initialSEXP, SEXP iter_maxSEXP, SEXP step_rateSEXP, SEXP step_maxSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const arma::umat& >::type inclusion(inclusionSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type eta_initial(eta_initialSEXP);
    Rcpp::traits::input_parameter< const size_t& >::type iter_max(iter_maxSEXP);
    Rcpp::traits::input_parameter< const double& >::type step_rate(step_rateSEXP);
    Rcpp::traits::input_parameter< const size_t& >::type step_max(step_maxSEXP);
    Rcpp::traits::input_parameter< const double& >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(AD_EYsubX_normal_SolveLagrange_rcpp(X, alpha, beta, sigma, phi, inclusion, eta_initial, iter_max, step_rate, step_max, tol));
    return rcpp_result_gen;
END_RCPP
}
// AD_EYsubX_normal_rcpp
List AD_EYsubX_normal_rcpp(const arma::mat& X, const double& alpha, const arma::vec& beta, const double& sigma, const arma::vec& phi, const arma::umat& inclusion);
RcppExport SEXP _MYHfusionRcpp_AD_EYsubX_normal_rcpp(SEXP XSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP sigmaSEXP, SEXP phiSEXP, SEXP inclusionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const arma::umat& >::type inclusion(inclusionSEXP);
    rcpp_result_gen = Rcpp::wrap(AD_EYsubX_normal_rcpp(X, alpha, beta, sigma, phi, inclusion));
    return rcpp_result_gen;
END_RCPP
}
// ADvar_EYsubX_normal_rcpp
List ADvar_EYsubX_normal_rcpp(const arma::mat& X, const double& alpha, const arma::vec& beta, const double& sigma, const arma::vec& phi, const arma::umat& inclusion, const arma::vec& eta);
RcppExport SEXP _MYHfusionRcpp_ADvar_EYsubX_normal_rcpp(SEXP XSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP sigmaSEXP, SEXP phiSEXP, SEXP inclusionSEXP, SEXP etaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const arma::umat& >::type inclusion(inclusionSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type eta(etaSEXP);
    rcpp_result_gen = Rcpp::wrap(ADvar_EYsubX_normal_rcpp(X, alpha, beta, sigma, phi, inclusion, eta));
    return rcpp_result_gen;
END_RCPP
}
// ADCS_EY_normal_Lagrange_rcpp
List ADCS_EY_normal_Lagrange_rcpp(const arma::mat& X, const double& alpha, const arma::vec& beta, const double& sigma, const double& phi, const arma::vec& CS_beta, const double& eta);
RcppExport SEXP _MYHfusionRcpp_ADCS_EY_normal_Lagrange_rcpp(SEXP XSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP sigmaSEXP, SEXP phiSEXP, SEXP CS_betaSEXP, SEXP etaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const double& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type CS_beta(CS_betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type eta(etaSEXP);
    rcpp_result_gen = Rcpp::wrap(ADCS_EY_normal_Lagrange_rcpp(X, alpha, beta, sigma, phi, CS_beta, eta));
    return rcpp_result_gen;
END_RCPP
}
// ADCS_EY_normal_SolveLagrange_rcpp
List ADCS_EY_normal_SolveLagrange_rcpp(const arma::mat& X, const double& alpha, const arma::vec& beta, const double& sigma, const double& phi, const arma::vec& CS_beta, const double& eta_initial, const size_t& iter_max, const double& step_rate, const size_t& step_max, const double& tol);
RcppExport SEXP _MYHfusionRcpp_ADCS_EY_normal_SolveLagrange_rcpp(SEXP XSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP sigmaSEXP, SEXP phiSEXP, SEXP CS_betaSEXP, SEXP eta_initialSEXP, SEXP iter_maxSEXP, SEXP step_rateSEXP, SEXP step_maxSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const double& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type CS_beta(CS_betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type eta_initial(eta_initialSEXP);
    Rcpp::traits::input_parameter< const size_t& >::type iter_max(iter_maxSEXP);
    Rcpp::traits::input_parameter< const double& >::type step_rate(step_rateSEXP);
    Rcpp::traits::input_parameter< const size_t& >::type step_max(step_maxSEXP);
    Rcpp::traits::input_parameter< const double& >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(ADCS_EY_normal_SolveLagrange_rcpp(X, alpha, beta, sigma, phi, CS_beta, eta_initial, iter_max, step_rate, step_max, tol));
    return rcpp_result_gen;
END_RCPP
}
// ADCS_EY_normal_rcpp
List ADCS_EY_normal_rcpp(const arma::mat& X, const double& alpha, const arma::vec& beta, const double& sigma, const double& phi, const arma::vec& CS_beta);
RcppExport SEXP _MYHfusionRcpp_ADCS_EY_normal_rcpp(SEXP XSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP sigmaSEXP, SEXP phiSEXP, SEXP CS_betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const double& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type CS_beta(CS_betaSEXP);
    rcpp_result_gen = Rcpp::wrap(ADCS_EY_normal_rcpp(X, alpha, beta, sigma, phi, CS_beta));
    return rcpp_result_gen;
END_RCPP
}
// ADCSvar_EY_normal_rcpp
List ADCSvar_EY_normal_rcpp(const arma::mat& X, const double& alpha, const arma::vec& beta, const double& sigma, const double& phi, const arma::vec& CS_beta, const double& eta);
RcppExport SEXP _MYHfusionRcpp_ADCSvar_EY_normal_rcpp(SEXP XSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP sigmaSEXP, SEXP phiSEXP, SEXP CS_betaSEXP, SEXP etaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const double& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type CS_beta(CS_betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type eta(etaSEXP);
    rcpp_result_gen = Rcpp::wrap(ADCSvar_EY_normal_rcpp(X, alpha, beta, sigma, phi, CS_beta, eta));
    return rcpp_result_gen;
END_RCPP
}
// ADCS_EXsubY_normal_Lagrange_rcpp
List ADCS_EXsubY_normal_Lagrange_rcpp(const arma::mat& X, const double& alpha, const arma::vec& beta, const double& sigma, const arma::mat& phi, const arma::vec& CS_beta, const arma::mat& y_pts, const arma::vec& eta);
RcppExport SEXP _MYHfusionRcpp_ADCS_EXsubY_normal_Lagrange_rcpp(SEXP XSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP sigmaSEXP, SEXP phiSEXP, SEXP CS_betaSEXP, SEXP y_ptsSEXP, SEXP etaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type CS_beta(CS_betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type y_pts(y_ptsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type eta(etaSEXP);
    rcpp_result_gen = Rcpp::wrap(ADCS_EXsubY_normal_Lagrange_rcpp(X, alpha, beta, sigma, phi, CS_beta, y_pts, eta));
    return rcpp_result_gen;
END_RCPP
}
// ADCS_EXsubY_normal_SolveLagrange_rcpp
List ADCS_EXsubY_normal_SolveLagrange_rcpp(const arma::mat& X, const double& alpha, const arma::vec& beta, const double& sigma, const arma::mat& phi, const arma::vec& CS_beta, const arma::mat& y_pts, const arma::vec& eta_initial, const size_t& iter_max, const double& step_rate, const size_t& step_max, const double& tol);
RcppExport SEXP _MYHfusionRcpp_ADCS_EXsubY_normal_SolveLagrange_rcpp(SEXP XSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP sigmaSEXP, SEXP phiSEXP, SEXP CS_betaSEXP, SEXP y_ptsSEXP, SEXP eta_initialSEXP, SEXP iter_maxSEXP, SEXP step_rateSEXP, SEXP step_maxSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type CS_beta(CS_betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type y_pts(y_ptsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type eta_initial(eta_initialSEXP);
    Rcpp::traits::input_parameter< const size_t& >::type iter_max(iter_maxSEXP);
    Rcpp::traits::input_parameter< const double& >::type step_rate(step_rateSEXP);
    Rcpp::traits::input_parameter< const size_t& >::type step_max(step_maxSEXP);
    Rcpp::traits::input_parameter< const double& >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(ADCS_EXsubY_normal_SolveLagrange_rcpp(X, alpha, beta, sigma, phi, CS_beta, y_pts, eta_initial, iter_max, step_rate, step_max, tol));
    return rcpp_result_gen;
END_RCPP
}
// ADCS_EXsubY_normal_rcpp
List ADCS_EXsubY_normal_rcpp(const arma::mat& X, const double& alpha, const arma::vec& beta, const double& sigma, const arma::mat& phi, const arma::vec& CS_beta, const arma::mat& y_pts);
RcppExport SEXP _MYHfusionRcpp_ADCS_EXsubY_normal_rcpp(SEXP XSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP sigmaSEXP, SEXP phiSEXP, SEXP CS_betaSEXP, SEXP y_ptsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type CS_beta(CS_betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type y_pts(y_ptsSEXP);
    rcpp_result_gen = Rcpp::wrap(ADCS_EXsubY_normal_rcpp(X, alpha, beta, sigma, phi, CS_beta, y_pts));
    return rcpp_result_gen;
END_RCPP
}
// ADCSvar_EXsubY_normal_rcpp
List ADCSvar_EXsubY_normal_rcpp(const arma::mat& X, const double& alpha, const arma::vec& beta, const double& sigma, const arma::mat& phi, const arma::vec& CS_beta, const arma::mat& y_pts, const arma::vec& eta);
RcppExport SEXP _MYHfusionRcpp_ADCSvar_EXsubY_normal_rcpp(SEXP XSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP sigmaSEXP, SEXP phiSEXP, SEXP CS_betaSEXP, SEXP y_ptsSEXP, SEXP etaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type CS_beta(CS_betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type y_pts(y_ptsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type eta(etaSEXP);
    rcpp_result_gen = Rcpp::wrap(ADCSvar_EXsubY_normal_rcpp(X, alpha, beta, sigma, phi, CS_beta, y_pts, eta));
    return rcpp_result_gen;
END_RCPP
}
// ADCS_EYsubX_normal_Lagrange_rcpp
List ADCS_EYsubX_normal_Lagrange_rcpp(const arma::mat& X, const double& alpha, const arma::vec& beta, const double& sigma, const arma::vec& phi, const arma::vec& CS_beta, const arma::umat& inclusion, const arma::vec& eta);
RcppExport SEXP _MYHfusionRcpp_ADCS_EYsubX_normal_Lagrange_rcpp(SEXP XSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP sigmaSEXP, SEXP phiSEXP, SEXP CS_betaSEXP, SEXP inclusionSEXP, SEXP etaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type CS_beta(CS_betaSEXP);
    Rcpp::traits::input_parameter< const arma::umat& >::type inclusion(inclusionSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type eta(etaSEXP);
    rcpp_result_gen = Rcpp::wrap(ADCS_EYsubX_normal_Lagrange_rcpp(X, alpha, beta, sigma, phi, CS_beta, inclusion, eta));
    return rcpp_result_gen;
END_RCPP
}
// ADCS_EYsubX_normal_SolveLagrange_rcpp
List ADCS_EYsubX_normal_SolveLagrange_rcpp(const arma::mat& X, const double& alpha, const arma::vec& beta, const double& sigma, const arma::vec& phi, const arma::vec& CS_beta, const arma::umat& inclusion, const arma::vec& eta_initial, const size_t& iter_max, const double& step_rate, const size_t& step_max, const double& tol);
RcppExport SEXP _MYHfusionRcpp_ADCS_EYsubX_normal_SolveLagrange_rcpp(SEXP XSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP sigmaSEXP, SEXP phiSEXP, SEXP CS_betaSEXP, SEXP inclusionSEXP, SEXP eta_initialSEXP, SEXP iter_maxSEXP, SEXP step_rateSEXP, SEXP step_maxSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type CS_beta(CS_betaSEXP);
    Rcpp::traits::input_parameter< const arma::umat& >::type inclusion(inclusionSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type eta_initial(eta_initialSEXP);
    Rcpp::traits::input_parameter< const size_t& >::type iter_max(iter_maxSEXP);
    Rcpp::traits::input_parameter< const double& >::type step_rate(step_rateSEXP);
    Rcpp::traits::input_parameter< const size_t& >::type step_max(step_maxSEXP);
    Rcpp::traits::input_parameter< const double& >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(ADCS_EYsubX_normal_SolveLagrange_rcpp(X, alpha, beta, sigma, phi, CS_beta, inclusion, eta_initial, iter_max, step_rate, step_max, tol));
    return rcpp_result_gen;
END_RCPP
}
// ADCS_EYsubX_normal_rcpp
List ADCS_EYsubX_normal_rcpp(const arma::mat& X, const double& alpha, const arma::vec& beta, const double& sigma, const arma::vec& phi, const arma::vec& CS_beta, const arma::umat& inclusion);
RcppExport SEXP _MYHfusionRcpp_ADCS_EYsubX_normal_rcpp(SEXP XSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP sigmaSEXP, SEXP phiSEXP, SEXP CS_betaSEXP, SEXP inclusionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type CS_beta(CS_betaSEXP);
    Rcpp::traits::input_parameter< const arma::umat& >::type inclusion(inclusionSEXP);
    rcpp_result_gen = Rcpp::wrap(ADCS_EYsubX_normal_rcpp(X, alpha, beta, sigma, phi, CS_beta, inclusion));
    return rcpp_result_gen;
END_RCPP
}
// ADCSvar_EYsubX_normal_rcpp
List ADCSvar_EYsubX_normal_rcpp(const arma::mat& X, const double& alpha, const arma::vec& beta, const double& sigma, const arma::vec& phi, const arma::vec& CS_beta, const arma::umat& inclusion, const arma::vec& eta);
RcppExport SEXP _MYHfusionRcpp_ADCSvar_EYsubX_normal_rcpp(SEXP XSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP sigmaSEXP, SEXP phiSEXP, SEXP CS_betaSEXP, SEXP inclusionSEXP, SEXP etaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type CS_beta(CS_betaSEXP);
    Rcpp::traits::input_parameter< const arma::umat& >::type inclusion(inclusionSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type eta(etaSEXP);
    rcpp_result_gen = Rcpp::wrap(ADCSvar_EYsubX_normal_rcpp(X, alpha, beta, sigma, phi, CS_beta, inclusion, eta));
    return rcpp_result_gen;
END_RCPP
}
// ADPPS_EX_normal_Lagrange_rcpp
List ADPPS_EX_normal_Lagrange_rcpp(const arma::mat& X, const double& alpha, const arma::vec& beta, const double& sigma, const arma::vec& phi, const double& PPS_beta, const arma::vec& eta);
RcppExport SEXP _MYHfusionRcpp_ADPPS_EX_normal_Lagrange_rcpp(SEXP XSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP sigmaSEXP, SEXP phiSEXP, SEXP PPS_betaSEXP, SEXP etaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const double& >::type PPS_beta(PPS_betaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type eta(etaSEXP);
    rcpp_result_gen = Rcpp::wrap(ADPPS_EX_normal_Lagrange_rcpp(X, alpha, beta, sigma, phi, PPS_beta, eta));
    return rcpp_result_gen;
END_RCPP
}
// ADPPS_EX_normal_SolveLagrange_rcpp
List ADPPS_EX_normal_SolveLagrange_rcpp(const arma::mat& X, const double& alpha, const arma::vec& beta, const double& sigma, const arma::vec& phi, const double& PPS_beta, const arma::vec& eta_initial, const size_t& iter_max, const double& step_rate, const size_t& step_max, const double& tol);
RcppExport SEXP _MYHfusionRcpp_ADPPS_EX_normal_SolveLagrange_rcpp(SEXP XSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP sigmaSEXP, SEXP phiSEXP, SEXP PPS_betaSEXP, SEXP eta_initialSEXP, SEXP iter_maxSEXP, SEXP step_rateSEXP, SEXP step_maxSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const double& >::type PPS_beta(PPS_betaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type eta_initial(eta_initialSEXP);
    Rcpp::traits::input_parameter< const size_t& >::type iter_max(iter_maxSEXP);
    Rcpp::traits::input_parameter< const double& >::type step_rate(step_rateSEXP);
    Rcpp::traits::input_parameter< const size_t& >::type step_max(step_maxSEXP);
    Rcpp::traits::input_parameter< const double& >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(ADPPS_EX_normal_SolveLagrange_rcpp(X, alpha, beta, sigma, phi, PPS_beta, eta_initial, iter_max, step_rate, step_max, tol));
    return rcpp_result_gen;
END_RCPP
}
// ADPPS_EX_normal_rcpp
List ADPPS_EX_normal_rcpp(const arma::mat& X, const double& alpha, const arma::vec& beta, const double& sigma, const arma::vec& phi, const double& PPS_beta);
RcppExport SEXP _MYHfusionRcpp_ADPPS_EX_normal_rcpp(SEXP XSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP sigmaSEXP, SEXP phiSEXP, SEXP PPS_betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const double& >::type PPS_beta(PPS_betaSEXP);
    rcpp_result_gen = Rcpp::wrap(ADPPS_EX_normal_rcpp(X, alpha, beta, sigma, phi, PPS_beta));
    return rcpp_result_gen;
END_RCPP
}
// ADPPSvar_EX_normal_rcpp
List ADPPSvar_EX_normal_rcpp(const arma::mat& X, const double& alpha, const arma::vec& beta, const double& sigma, const arma::vec& phi, const double& PPS_beta, const arma::vec& eta);
RcppExport SEXP _MYHfusionRcpp_ADPPSvar_EX_normal_rcpp(SEXP XSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP sigmaSEXP, SEXP phiSEXP, SEXP PPS_betaSEXP, SEXP etaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const double& >::type PPS_beta(PPS_betaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type eta(etaSEXP);
    rcpp_result_gen = Rcpp::wrap(ADPPSvar_EX_normal_rcpp(X, alpha, beta, sigma, phi, PPS_beta, eta));
    return rcpp_result_gen;
END_RCPP
}
// ADPPS_EY_normal_Lagrange_rcpp
List ADPPS_EY_normal_Lagrange_rcpp(const arma::mat& X, const double& alpha, const arma::vec& beta, const double& sigma, const double& phi, const double& PPS_beta, const double& eta);
RcppExport SEXP _MYHfusionRcpp_ADPPS_EY_normal_Lagrange_rcpp(SEXP XSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP sigmaSEXP, SEXP phiSEXP, SEXP PPS_betaSEXP, SEXP etaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const double& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const double& >::type PPS_beta(PPS_betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type eta(etaSEXP);
    rcpp_result_gen = Rcpp::wrap(ADPPS_EY_normal_Lagrange_rcpp(X, alpha, beta, sigma, phi, PPS_beta, eta));
    return rcpp_result_gen;
END_RCPP
}
// ADPPS_EY_normal_SolveLagrange_rcpp
List ADPPS_EY_normal_SolveLagrange_rcpp(const arma::mat& X, const double& alpha, const arma::vec& beta, const double& sigma, const double& phi, const double& PPS_beta, const double& eta_initial, const size_t& iter_max, const double& step_rate, const size_t& step_max, const double& tol);
RcppExport SEXP _MYHfusionRcpp_ADPPS_EY_normal_SolveLagrange_rcpp(SEXP XSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP sigmaSEXP, SEXP phiSEXP, SEXP PPS_betaSEXP, SEXP eta_initialSEXP, SEXP iter_maxSEXP, SEXP step_rateSEXP, SEXP step_maxSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const double& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const double& >::type PPS_beta(PPS_betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type eta_initial(eta_initialSEXP);
    Rcpp::traits::input_parameter< const size_t& >::type iter_max(iter_maxSEXP);
    Rcpp::traits::input_parameter< const double& >::type step_rate(step_rateSEXP);
    Rcpp::traits::input_parameter< const size_t& >::type step_max(step_maxSEXP);
    Rcpp::traits::input_parameter< const double& >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(ADPPS_EY_normal_SolveLagrange_rcpp(X, alpha, beta, sigma, phi, PPS_beta, eta_initial, iter_max, step_rate, step_max, tol));
    return rcpp_result_gen;
END_RCPP
}
// ADPPS_EY_normal_rcpp
List ADPPS_EY_normal_rcpp(const arma::mat& X, const double& alpha, const arma::vec& beta, const double& sigma, const double& phi, const double& PPS_beta);
RcppExport SEXP _MYHfusionRcpp_ADPPS_EY_normal_rcpp(SEXP XSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP sigmaSEXP, SEXP phiSEXP, SEXP PPS_betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const double& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const double& >::type PPS_beta(PPS_betaSEXP);
    rcpp_result_gen = Rcpp::wrap(ADPPS_EY_normal_rcpp(X, alpha, beta, sigma, phi, PPS_beta));
    return rcpp_result_gen;
END_RCPP
}
// ADPPSvar_EY_normal_rcpp
List ADPPSvar_EY_normal_rcpp(const arma::mat& X, const double& alpha, const arma::vec& beta, const double& sigma, const double& phi, const double& PPS_beta, const double& eta);
RcppExport SEXP _MYHfusionRcpp_ADPPSvar_EY_normal_rcpp(SEXP XSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP sigmaSEXP, SEXP phiSEXP, SEXP PPS_betaSEXP, SEXP etaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const double& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const double& >::type PPS_beta(PPS_betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type eta(etaSEXP);
    rcpp_result_gen = Rcpp::wrap(ADPPSvar_EY_normal_rcpp(X, alpha, beta, sigma, phi, PPS_beta, eta));
    return rcpp_result_gen;
END_RCPP
}
// ADPPS_EXsubY_normal_Lagrange_rcpp
List ADPPS_EXsubY_normal_Lagrange_rcpp(const arma::mat& X, const double& alpha, const arma::vec& beta, const double& sigma, const arma::mat& phi, const double& PPS_beta, const arma::mat& y_pts, const arma::vec& eta);
RcppExport SEXP _MYHfusionRcpp_ADPPS_EXsubY_normal_Lagrange_rcpp(SEXP XSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP sigmaSEXP, SEXP phiSEXP, SEXP PPS_betaSEXP, SEXP y_ptsSEXP, SEXP etaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const double& >::type PPS_beta(PPS_betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type y_pts(y_ptsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type eta(etaSEXP);
    rcpp_result_gen = Rcpp::wrap(ADPPS_EXsubY_normal_Lagrange_rcpp(X, alpha, beta, sigma, phi, PPS_beta, y_pts, eta));
    return rcpp_result_gen;
END_RCPP
}
// ADPPS_EXsubY_normal_SolveLagrange_rcpp
List ADPPS_EXsubY_normal_SolveLagrange_rcpp(const arma::mat& X, const double& alpha, const arma::vec& beta, const double& sigma, const arma::mat& phi, const double& PPS_beta, const arma::mat& y_pts, const arma::vec& eta_initial, const size_t& iter_max, const double& step_rate, const size_t& step_max, const double& tol);
RcppExport SEXP _MYHfusionRcpp_ADPPS_EXsubY_normal_SolveLagrange_rcpp(SEXP XSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP sigmaSEXP, SEXP phiSEXP, SEXP PPS_betaSEXP, SEXP y_ptsSEXP, SEXP eta_initialSEXP, SEXP iter_maxSEXP, SEXP step_rateSEXP, SEXP step_maxSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const double& >::type PPS_beta(PPS_betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type y_pts(y_ptsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type eta_initial(eta_initialSEXP);
    Rcpp::traits::input_parameter< const size_t& >::type iter_max(iter_maxSEXP);
    Rcpp::traits::input_parameter< const double& >::type step_rate(step_rateSEXP);
    Rcpp::traits::input_parameter< const size_t& >::type step_max(step_maxSEXP);
    Rcpp::traits::input_parameter< const double& >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(ADPPS_EXsubY_normal_SolveLagrange_rcpp(X, alpha, beta, sigma, phi, PPS_beta, y_pts, eta_initial, iter_max, step_rate, step_max, tol));
    return rcpp_result_gen;
END_RCPP
}
// ADPPS_EXsubY_normal_rcpp
List ADPPS_EXsubY_normal_rcpp(const arma::mat& X, const double& alpha, const arma::vec& beta, const double& sigma, const arma::mat& phi, const double& PPS_beta, const arma::mat& y_pts);
RcppExport SEXP _MYHfusionRcpp_ADPPS_EXsubY_normal_rcpp(SEXP XSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP sigmaSEXP, SEXP phiSEXP, SEXP PPS_betaSEXP, SEXP y_ptsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const double& >::type PPS_beta(PPS_betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type y_pts(y_ptsSEXP);
    rcpp_result_gen = Rcpp::wrap(ADPPS_EXsubY_normal_rcpp(X, alpha, beta, sigma, phi, PPS_beta, y_pts));
    return rcpp_result_gen;
END_RCPP
}
// ADPPSvar_EXsubY_normal_rcpp
List ADPPSvar_EXsubY_normal_rcpp(const arma::mat& X, const double& alpha, const arma::vec& beta, const double& sigma, const arma::mat& phi, const double& PPS_beta, const arma::mat& y_pts, const arma::vec& eta);
RcppExport SEXP _MYHfusionRcpp_ADPPSvar_EXsubY_normal_rcpp(SEXP XSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP sigmaSEXP, SEXP phiSEXP, SEXP PPS_betaSEXP, SEXP y_ptsSEXP, SEXP etaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const double& >::type PPS_beta(PPS_betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type y_pts(y_ptsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type eta(etaSEXP);
    rcpp_result_gen = Rcpp::wrap(ADPPSvar_EXsubY_normal_rcpp(X, alpha, beta, sigma, phi, PPS_beta, y_pts, eta));
    return rcpp_result_gen;
END_RCPP
}
// ADPPS_EYsubX_normal_Lagrange_rcpp
List ADPPS_EYsubX_normal_Lagrange_rcpp(const arma::mat& X, const double& alpha, const arma::vec& beta, const double& sigma, const arma::vec& phi, const double& PPS_beta, const arma::umat& inclusion, const arma::vec& eta);
RcppExport SEXP _MYHfusionRcpp_ADPPS_EYsubX_normal_Lagrange_rcpp(SEXP XSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP sigmaSEXP, SEXP phiSEXP, SEXP PPS_betaSEXP, SEXP inclusionSEXP, SEXP etaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const double& >::type PPS_beta(PPS_betaSEXP);
    Rcpp::traits::input_parameter< const arma::umat& >::type inclusion(inclusionSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type eta(etaSEXP);
    rcpp_result_gen = Rcpp::wrap(ADPPS_EYsubX_normal_Lagrange_rcpp(X, alpha, beta, sigma, phi, PPS_beta, inclusion, eta));
    return rcpp_result_gen;
END_RCPP
}
// ADPPS_EYsubX_normal_SolveLagrange_rcpp
List ADPPS_EYsubX_normal_SolveLagrange_rcpp(const arma::mat& X, const double& alpha, const arma::vec& beta, const double& sigma, const arma::vec& phi, const double& PPS_beta, const arma::umat& inclusion, const arma::vec& eta_initial, const size_t& iter_max, const double& step_rate, const size_t& step_max, const double& tol);
RcppExport SEXP _MYHfusionRcpp_ADPPS_EYsubX_normal_SolveLagrange_rcpp(SEXP XSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP sigmaSEXP, SEXP phiSEXP, SEXP PPS_betaSEXP, SEXP inclusionSEXP, SEXP eta_initialSEXP, SEXP iter_maxSEXP, SEXP step_rateSEXP, SEXP step_maxSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const double& >::type PPS_beta(PPS_betaSEXP);
    Rcpp::traits::input_parameter< const arma::umat& >::type inclusion(inclusionSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type eta_initial(eta_initialSEXP);
    Rcpp::traits::input_parameter< const size_t& >::type iter_max(iter_maxSEXP);
    Rcpp::traits::input_parameter< const double& >::type step_rate(step_rateSEXP);
    Rcpp::traits::input_parameter< const size_t& >::type step_max(step_maxSEXP);
    Rcpp::traits::input_parameter< const double& >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(ADPPS_EYsubX_normal_SolveLagrange_rcpp(X, alpha, beta, sigma, phi, PPS_beta, inclusion, eta_initial, iter_max, step_rate, step_max, tol));
    return rcpp_result_gen;
END_RCPP
}
// ADPPS_EYsubX_normal_rcpp
List ADPPS_EYsubX_normal_rcpp(const arma::mat& X, const double& alpha, const arma::vec& beta, const double& sigma, const arma::vec& phi, const double& PPS_beta, const arma::umat& inclusion);
RcppExport SEXP _MYHfusionRcpp_ADPPS_EYsubX_normal_rcpp(SEXP XSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP sigmaSEXP, SEXP phiSEXP, SEXP PPS_betaSEXP, SEXP inclusionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const double& >::type PPS_beta(PPS_betaSEXP);
    Rcpp::traits::input_parameter< const arma::umat& >::type inclusion(inclusionSEXP);
    rcpp_result_gen = Rcpp::wrap(ADPPS_EYsubX_normal_rcpp(X, alpha, beta, sigma, phi, PPS_beta, inclusion));
    return rcpp_result_gen;
END_RCPP
}
// ADPPSvar_EYsubX_normal_rcpp
List ADPPSvar_EYsubX_normal_rcpp(const arma::mat& X, const double& alpha, const arma::vec& beta, const double& sigma, const arma::vec& phi, const double& PPS_beta, const arma::umat& inclusion, const arma::vec& eta);
RcppExport SEXP _MYHfusionRcpp_ADPPSvar_EYsubX_normal_rcpp(SEXP XSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP sigmaSEXP, SEXP phiSEXP, SEXP PPS_betaSEXP, SEXP inclusionSEXP, SEXP etaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const double& >::type PPS_beta(PPS_betaSEXP);
    Rcpp::traits::input_parameter< const arma::umat& >::type inclusion(inclusionSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type eta(etaSEXP);
    rcpp_result_gen = Rcpp::wrap(ADPPSvar_EYsubX_normal_rcpp(X, alpha, beta, sigma, phi, PPS_beta, inclusion, eta));
    return rcpp_result_gen;
END_RCPP
}
// AD_EY_logistic_Lagrange_rcpp
List AD_EY_logistic_Lagrange_rcpp(const arma::mat& X, const double& alpha, const arma::vec& beta, const double& phi, const double& eta);
RcppExport SEXP _MYHfusionRcpp_AD_EY_logistic_Lagrange_rcpp(SEXP XSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP phiSEXP, SEXP etaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const double& >::type eta(etaSEXP);
    rcpp_result_gen = Rcpp::wrap(AD_EY_logistic_Lagrange_rcpp(X, alpha, beta, phi, eta));
    return rcpp_result_gen;
END_RCPP
}
// AD_EY_logistic_SolveLagrange_rcpp
List AD_EY_logistic_SolveLagrange_rcpp(const arma::mat& X, const double& alpha, const arma::vec& beta, const double& phi, const double& eta_initial, const size_t& iter_max, const double& step_rate, const size_t& step_max, const double& tol);
RcppExport SEXP _MYHfusionRcpp_AD_EY_logistic_SolveLagrange_rcpp(SEXP XSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP phiSEXP, SEXP eta_initialSEXP, SEXP iter_maxSEXP, SEXP step_rateSEXP, SEXP step_maxSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const double& >::type eta_initial(eta_initialSEXP);
    Rcpp::traits::input_parameter< const size_t& >::type iter_max(iter_maxSEXP);
    Rcpp::traits::input_parameter< const double& >::type step_rate(step_rateSEXP);
    Rcpp::traits::input_parameter< const size_t& >::type step_max(step_maxSEXP);
    Rcpp::traits::input_parameter< const double& >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(AD_EY_logistic_SolveLagrange_rcpp(X, alpha, beta, phi, eta_initial, iter_max, step_rate, step_max, tol));
    return rcpp_result_gen;
END_RCPP
}
// AD_EY_logistic_rcpp
List AD_EY_logistic_rcpp(const arma::mat& X, const double& alpha, const arma::vec& beta, const double& phi);
RcppExport SEXP _MYHfusionRcpp_AD_EY_logistic_rcpp(SEXP XSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP phiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type phi(phiSEXP);
    rcpp_result_gen = Rcpp::wrap(AD_EY_logistic_rcpp(X, alpha, beta, phi));
    return rcpp_result_gen;
END_RCPP
}
// ADvar_EY_logistic_rcpp
List ADvar_EY_logistic_rcpp(const arma::mat& X, const double& alpha, const arma::vec& beta, const double& phi, const double& eta);
RcppExport SEXP _MYHfusionRcpp_ADvar_EY_logistic_rcpp(SEXP XSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP phiSEXP, SEXP etaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const double& >::type eta(etaSEXP);
    rcpp_result_gen = Rcpp::wrap(ADvar_EY_logistic_rcpp(X, alpha, beta, phi, eta));
    return rcpp_result_gen;
END_RCPP
}
// AD_EY_Gamma_Lagrange_rcpp
List AD_EY_Gamma_Lagrange_rcpp(const arma::mat& X, const double& alpha, const arma::vec& beta, const double& nu, const double& phi, const double& eta);
RcppExport SEXP _MYHfusionRcpp_AD_EY_Gamma_Lagrange_rcpp(SEXP XSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP nuSEXP, SEXP phiSEXP, SEXP etaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const double& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const double& >::type eta(etaSEXP);
    rcpp_result_gen = Rcpp::wrap(AD_EY_Gamma_Lagrange_rcpp(X, alpha, beta, nu, phi, eta));
    return rcpp_result_gen;
END_RCPP
}
// AD_EY_Gamma_SolveLagrange_rcpp
List AD_EY_Gamma_SolveLagrange_rcpp(const arma::mat& X, const double& alpha, const arma::vec& beta, const double& nu, const double& phi, const double& eta_initial, const size_t& iter_max, const double& step_rate, const size_t& step_max, const double& tol);
RcppExport SEXP _MYHfusionRcpp_AD_EY_Gamma_SolveLagrange_rcpp(SEXP XSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP nuSEXP, SEXP phiSEXP, SEXP eta_initialSEXP, SEXP iter_maxSEXP, SEXP step_rateSEXP, SEXP step_maxSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const double& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const double& >::type eta_initial(eta_initialSEXP);
    Rcpp::traits::input_parameter< const size_t& >::type iter_max(iter_maxSEXP);
    Rcpp::traits::input_parameter< const double& >::type step_rate(step_rateSEXP);
    Rcpp::traits::input_parameter< const size_t& >::type step_max(step_maxSEXP);
    Rcpp::traits::input_parameter< const double& >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(AD_EY_Gamma_SolveLagrange_rcpp(X, alpha, beta, nu, phi, eta_initial, iter_max, step_rate, step_max, tol));
    return rcpp_result_gen;
END_RCPP
}
// AD_EY_Gamma_rcpp
List AD_EY_Gamma_rcpp(const arma::mat& X, const double& alpha, const arma::vec& beta, const double& nu, const double& phi);
RcppExport SEXP _MYHfusionRcpp_AD_EY_Gamma_rcpp(SEXP XSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP nuSEXP, SEXP phiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const double& >::type phi(phiSEXP);
    rcpp_result_gen = Rcpp::wrap(AD_EY_Gamma_rcpp(X, alpha, beta, nu, phi));
    return rcpp_result_gen;
END_RCPP
}
// AD_EXsubY_Gamma_Lagrange_rcpp
List AD_EXsubY_Gamma_Lagrange_rcpp(const arma::mat& X, const double& alpha, const arma::vec& beta, const double& nu, const arma::mat& phi, const arma::mat& y_pts, const arma::vec& eta);
RcppExport SEXP _MYHfusionRcpp_AD_EXsubY_Gamma_Lagrange_rcpp(SEXP XSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP nuSEXP, SEXP phiSEXP, SEXP y_ptsSEXP, SEXP etaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type y_pts(y_ptsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type eta(etaSEXP);
    rcpp_result_gen = Rcpp::wrap(AD_EXsubY_Gamma_Lagrange_rcpp(X, alpha, beta, nu, phi, y_pts, eta));
    return rcpp_result_gen;
END_RCPP
}
// AD_EXsubY_Gamma_SolveLagrange_rcpp
List AD_EXsubY_Gamma_SolveLagrange_rcpp(const arma::mat& X, const double& alpha, const arma::vec& beta, const double& nu, const arma::mat& phi, const arma::mat& y_pts, const arma::vec& eta_initial, const size_t& iter_max, const double& step_rate, const size_t& step_max, const double& tol);
RcppExport SEXP _MYHfusionRcpp_AD_EXsubY_Gamma_SolveLagrange_rcpp(SEXP XSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP nuSEXP, SEXP phiSEXP, SEXP y_ptsSEXP, SEXP eta_initialSEXP, SEXP iter_maxSEXP, SEXP step_rateSEXP, SEXP step_maxSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type y_pts(y_ptsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type eta_initial(eta_initialSEXP);
    Rcpp::traits::input_parameter< const size_t& >::type iter_max(iter_maxSEXP);
    Rcpp::traits::input_parameter< const double& >::type step_rate(step_rateSEXP);
    Rcpp::traits::input_parameter< const size_t& >::type step_max(step_maxSEXP);
    Rcpp::traits::input_parameter< const double& >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(AD_EXsubY_Gamma_SolveLagrange_rcpp(X, alpha, beta, nu, phi, y_pts, eta_initial, iter_max, step_rate, step_max, tol));
    return rcpp_result_gen;
END_RCPP
}
// AD_EXsubY_Gamma_rcpp
List AD_EXsubY_Gamma_rcpp(const arma::mat& X, const double& alpha, const arma::vec& beta, const double& nu, const arma::mat& phi, const arma::mat& y_pts);
RcppExport SEXP _MYHfusionRcpp_AD_EXsubY_Gamma_rcpp(SEXP XSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP nuSEXP, SEXP phiSEXP, SEXP y_ptsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type y_pts(y_ptsSEXP);
    rcpp_result_gen = Rcpp::wrap(AD_EXsubY_Gamma_rcpp(X, alpha, beta, nu, phi, y_pts));
    return rcpp_result_gen;
END_RCPP
}
// AD_EYsubX_Gamma_Lagrange_rcpp
List AD_EYsubX_Gamma_Lagrange_rcpp(const arma::mat& X, const double& alpha, const arma::vec& beta, const double& nu, const arma::vec& phi, const arma::umat& inclusion, const arma::vec& eta);
RcppExport SEXP _MYHfusionRcpp_AD_EYsubX_Gamma_Lagrange_rcpp(SEXP XSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP nuSEXP, SEXP phiSEXP, SEXP inclusionSEXP, SEXP etaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const arma::umat& >::type inclusion(inclusionSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type eta(etaSEXP);
    rcpp_result_gen = Rcpp::wrap(AD_EYsubX_Gamma_Lagrange_rcpp(X, alpha, beta, nu, phi, inclusion, eta));
    return rcpp_result_gen;
END_RCPP
}
// AD_EYsubX_Gamma_SolveLagrange_rcpp
List AD_EYsubX_Gamma_SolveLagrange_rcpp(const arma::mat& X, const double& alpha, const arma::vec& beta, const double& nu, const arma::vec& phi, const arma::umat& inclusion, const arma::vec& eta_initial, const size_t& iter_max, const double& step_rate, const size_t& step_max, const double& tol);
RcppExport SEXP _MYHfusionRcpp_AD_EYsubX_Gamma_SolveLagrange_rcpp(SEXP XSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP nuSEXP, SEXP phiSEXP, SEXP inclusionSEXP, SEXP eta_initialSEXP, SEXP iter_maxSEXP, SEXP step_rateSEXP, SEXP step_maxSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const arma::umat& >::type inclusion(inclusionSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type eta_initial(eta_initialSEXP);
    Rcpp::traits::input_parameter< const size_t& >::type iter_max(iter_maxSEXP);
    Rcpp::traits::input_parameter< const double& >::type step_rate(step_rateSEXP);
    Rcpp::traits::input_parameter< const size_t& >::type step_max(step_maxSEXP);
    Rcpp::traits::input_parameter< const double& >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(AD_EYsubX_Gamma_SolveLagrange_rcpp(X, alpha, beta, nu, phi, inclusion, eta_initial, iter_max, step_rate, step_max, tol));
    return rcpp_result_gen;
END_RCPP
}
// ADPPS_EX_Gamma_Lagrange_rcpp
List ADPPS_EX_Gamma_Lagrange_rcpp(const arma::mat& X, const double& alpha, const arma::vec& beta, const double& nu, const arma::vec& phi, const double& PPS_beta, const arma::vec& eta);
RcppExport SEXP _MYHfusionRcpp_ADPPS_EX_Gamma_Lagrange_rcpp(SEXP XSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP nuSEXP, SEXP phiSEXP, SEXP PPS_betaSEXP, SEXP etaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const double& >::type PPS_beta(PPS_betaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type eta(etaSEXP);
    rcpp_result_gen = Rcpp::wrap(ADPPS_EX_Gamma_Lagrange_rcpp(X, alpha, beta, nu, phi, PPS_beta, eta));
    return rcpp_result_gen;
END_RCPP
}
// ADPPS_EX_Gamma_SolveLagrange_rcpp
List ADPPS_EX_Gamma_SolveLagrange_rcpp(const arma::mat& X, const double& alpha, const arma::vec& beta, const double& nu, const arma::vec& phi, const double& PPS_beta, const arma::vec& eta_initial, const size_t& iter_max, const double& step_rate, const size_t& step_max, const double& tol);
RcppExport SEXP _MYHfusionRcpp_ADPPS_EX_Gamma_SolveLagrange_rcpp(SEXP XSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP nuSEXP, SEXP phiSEXP, SEXP PPS_betaSEXP, SEXP eta_initialSEXP, SEXP iter_maxSEXP, SEXP step_rateSEXP, SEXP step_maxSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const double& >::type PPS_beta(PPS_betaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type eta_initial(eta_initialSEXP);
    Rcpp::traits::input_parameter< const size_t& >::type iter_max(iter_maxSEXP);
    Rcpp::traits::input_parameter< const double& >::type step_rate(step_rateSEXP);
    Rcpp::traits::input_parameter< const size_t& >::type step_max(step_maxSEXP);
    Rcpp::traits::input_parameter< const double& >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(ADPPS_EX_Gamma_SolveLagrange_rcpp(X, alpha, beta, nu, phi, PPS_beta, eta_initial, iter_max, step_rate, step_max, tol));
    return rcpp_result_gen;
END_RCPP
}
// ADPPS_EY_Gamma_Lagrange_rcpp
List ADPPS_EY_Gamma_Lagrange_rcpp(const arma::mat& X, const double& alpha, const arma::vec& beta, const double& nu, const double& phi, const double& PPS_beta, const double& eta);
RcppExport SEXP _MYHfusionRcpp_ADPPS_EY_Gamma_Lagrange_rcpp(SEXP XSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP nuSEXP, SEXP phiSEXP, SEXP PPS_betaSEXP, SEXP etaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const double& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const double& >::type PPS_beta(PPS_betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type eta(etaSEXP);
    rcpp_result_gen = Rcpp::wrap(ADPPS_EY_Gamma_Lagrange_rcpp(X, alpha, beta, nu, phi, PPS_beta, eta));
    return rcpp_result_gen;
END_RCPP
}
// ADPPS_EY_Gamma_SolveLagrange_rcpp
List ADPPS_EY_Gamma_SolveLagrange_rcpp(const arma::mat& X, const double& alpha, const arma::vec& beta, const double& nu, const double& phi, const double& PPS_beta, const double& eta_initial, const size_t& iter_max, const double& step_rate, const size_t& step_max, const double& tol);
RcppExport SEXP _MYHfusionRcpp_ADPPS_EY_Gamma_SolveLagrange_rcpp(SEXP XSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP nuSEXP, SEXP phiSEXP, SEXP PPS_betaSEXP, SEXP eta_initialSEXP, SEXP iter_maxSEXP, SEXP step_rateSEXP, SEXP step_maxSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const double& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const double& >::type PPS_beta(PPS_betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type eta_initial(eta_initialSEXP);
    Rcpp::traits::input_parameter< const size_t& >::type iter_max(iter_maxSEXP);
    Rcpp::traits::input_parameter< const double& >::type step_rate(step_rateSEXP);
    Rcpp::traits::input_parameter< const size_t& >::type step_max(step_maxSEXP);
    Rcpp::traits::input_parameter< const double& >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(ADPPS_EY_Gamma_SolveLagrange_rcpp(X, alpha, beta, nu, phi, PPS_beta, eta_initial, iter_max, step_rate, step_max, tol));
    return rcpp_result_gen;
END_RCPP
}
// ADPPS_EXsubY_Gamma_Lagrange_rcpp
List ADPPS_EXsubY_Gamma_Lagrange_rcpp(const arma::mat& X, const double& alpha, const arma::vec& beta, const double& nu, const arma::mat& phi, const double& PPS_beta, const arma::mat& y_pts, const arma::vec& eta);
RcppExport SEXP _MYHfusionRcpp_ADPPS_EXsubY_Gamma_Lagrange_rcpp(SEXP XSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP nuSEXP, SEXP phiSEXP, SEXP PPS_betaSEXP, SEXP y_ptsSEXP, SEXP etaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const double& >::type PPS_beta(PPS_betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type y_pts(y_ptsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type eta(etaSEXP);
    rcpp_result_gen = Rcpp::wrap(ADPPS_EXsubY_Gamma_Lagrange_rcpp(X, alpha, beta, nu, phi, PPS_beta, y_pts, eta));
    return rcpp_result_gen;
END_RCPP
}
// ADPPS_EXsubY_Gamma_SolveLagrange_rcpp
List ADPPS_EXsubY_Gamma_SolveLagrange_rcpp(const arma::mat& X, const double& alpha, const arma::vec& beta, const double& nu, const arma::mat& phi, const double& PPS_beta, const arma::mat& y_pts, const arma::vec& eta_initial, const size_t& iter_max, const double& step_rate, const size_t& step_max, const double& tol);
RcppExport SEXP _MYHfusionRcpp_ADPPS_EXsubY_Gamma_SolveLagrange_rcpp(SEXP XSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP nuSEXP, SEXP phiSEXP, SEXP PPS_betaSEXP, SEXP y_ptsSEXP, SEXP eta_initialSEXP, SEXP iter_maxSEXP, SEXP step_rateSEXP, SEXP step_maxSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const double& >::type PPS_beta(PPS_betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type y_pts(y_ptsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type eta_initial(eta_initialSEXP);
    Rcpp::traits::input_parameter< const size_t& >::type iter_max(iter_maxSEXP);
    Rcpp::traits::input_parameter< const double& >::type step_rate(step_rateSEXP);
    Rcpp::traits::input_parameter< const size_t& >::type step_max(step_maxSEXP);
    Rcpp::traits::input_parameter< const double& >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(ADPPS_EXsubY_Gamma_SolveLagrange_rcpp(X, alpha, beta, nu, phi, PPS_beta, y_pts, eta_initial, iter_max, step_rate, step_max, tol));
    return rcpp_result_gen;
END_RCPP
}
// ADPPS_EYsubX_Gamma_Lagrange_rcpp
List ADPPS_EYsubX_Gamma_Lagrange_rcpp(const arma::mat& X, const double& alpha, const arma::vec& beta, const double& nu, const arma::vec& phi, const double& PPS_beta, const arma::umat& inclusion, const arma::vec& eta);
RcppExport SEXP _MYHfusionRcpp_ADPPS_EYsubX_Gamma_Lagrange_rcpp(SEXP XSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP nuSEXP, SEXP phiSEXP, SEXP PPS_betaSEXP, SEXP inclusionSEXP, SEXP etaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const double& >::type PPS_beta(PPS_betaSEXP);
    Rcpp::traits::input_parameter< const arma::umat& >::type inclusion(inclusionSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type eta(etaSEXP);
    rcpp_result_gen = Rcpp::wrap(ADPPS_EYsubX_Gamma_Lagrange_rcpp(X, alpha, beta, nu, phi, PPS_beta, inclusion, eta));
    return rcpp_result_gen;
END_RCPP
}
// ADPPS_EYsubX_Gamma_SolveLagrange_rcpp
List ADPPS_EYsubX_Gamma_SolveLagrange_rcpp(const arma::mat& X, const double& alpha, const arma::vec& beta, const double& nu, const arma::vec& phi, const double& PPS_beta, const arma::umat& inclusion, const arma::vec& eta_initial, const size_t& iter_max, const double& step_rate, const size_t& step_max, const double& tol);
RcppExport SEXP _MYHfusionRcpp_ADPPS_EYsubX_Gamma_SolveLagrange_rcpp(SEXP XSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP nuSEXP, SEXP phiSEXP, SEXP PPS_betaSEXP, SEXP inclusionSEXP, SEXP eta_initialSEXP, SEXP iter_maxSEXP, SEXP step_rateSEXP, SEXP step_maxSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const double& >::type PPS_beta(PPS_betaSEXP);
    Rcpp::traits::input_parameter< const arma::umat& >::type inclusion(inclusionSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type eta_initial(eta_initialSEXP);
    Rcpp::traits::input_parameter< const size_t& >::type iter_max(iter_maxSEXP);
    Rcpp::traits::input_parameter< const double& >::type step_rate(step_rateSEXP);
    Rcpp::traits::input_parameter< const size_t& >::type step_max(step_maxSEXP);
    Rcpp::traits::input_parameter< const double& >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(ADPPS_EYsubX_Gamma_SolveLagrange_rcpp(X, alpha, beta, nu, phi, PPS_beta, inclusion, eta_initial, iter_max, step_rate, step_max, tol));
    return rcpp_result_gen;
END_RCPP
}
// ADCS_EY_Gamma_Lagrange_rcpp
List ADCS_EY_Gamma_Lagrange_rcpp(const arma::mat& X, const double& alpha, const arma::vec& beta, const double& nu, const double& phi, const arma::vec& CS_beta, const double& eta);
RcppExport SEXP _MYHfusionRcpp_ADCS_EY_Gamma_Lagrange_rcpp(SEXP XSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP nuSEXP, SEXP phiSEXP, SEXP CS_betaSEXP, SEXP etaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const double& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type CS_beta(CS_betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type eta(etaSEXP);
    rcpp_result_gen = Rcpp::wrap(ADCS_EY_Gamma_Lagrange_rcpp(X, alpha, beta, nu, phi, CS_beta, eta));
    return rcpp_result_gen;
END_RCPP
}
// ADCS_EY_Gamma_SolveLagrange_rcpp
List ADCS_EY_Gamma_SolveLagrange_rcpp(const arma::mat& X, const double& alpha, const arma::vec& beta, const double& nu, const double& phi, const arma::vec& CS_beta, const double& eta_initial, const size_t& iter_max, const double& step_rate, const size_t& step_max, const double& tol);
RcppExport SEXP _MYHfusionRcpp_ADCS_EY_Gamma_SolveLagrange_rcpp(SEXP XSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP nuSEXP, SEXP phiSEXP, SEXP CS_betaSEXP, SEXP eta_initialSEXP, SEXP iter_maxSEXP, SEXP step_rateSEXP, SEXP step_maxSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const double& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type CS_beta(CS_betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type eta_initial(eta_initialSEXP);
    Rcpp::traits::input_parameter< const size_t& >::type iter_max(iter_maxSEXP);
    Rcpp::traits::input_parameter< const double& >::type step_rate(step_rateSEXP);
    Rcpp::traits::input_parameter< const size_t& >::type step_max(step_maxSEXP);
    Rcpp::traits::input_parameter< const double& >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(ADCS_EY_Gamma_SolveLagrange_rcpp(X, alpha, beta, nu, phi, CS_beta, eta_initial, iter_max, step_rate, step_max, tol));
    return rcpp_result_gen;
END_RCPP
}
// ADCS_EXsubY_Gamma_Lagrange_rcpp
List ADCS_EXsubY_Gamma_Lagrange_rcpp(const arma::mat& X, const double& alpha, const arma::vec& beta, const double& nu, const arma::mat& phi, const arma::vec& CS_beta, const arma::mat& y_pts, const arma::vec& eta);
RcppExport SEXP _MYHfusionRcpp_ADCS_EXsubY_Gamma_Lagrange_rcpp(SEXP XSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP nuSEXP, SEXP phiSEXP, SEXP CS_betaSEXP, SEXP y_ptsSEXP, SEXP etaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type CS_beta(CS_betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type y_pts(y_ptsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type eta(etaSEXP);
    rcpp_result_gen = Rcpp::wrap(ADCS_EXsubY_Gamma_Lagrange_rcpp(X, alpha, beta, nu, phi, CS_beta, y_pts, eta));
    return rcpp_result_gen;
END_RCPP
}
// ADCS_EXsubY_Gamma_SolveLagrange_rcpp
List ADCS_EXsubY_Gamma_SolveLagrange_rcpp(const arma::mat& X, const double& alpha, const arma::vec& beta, const double& nu, const arma::mat& phi, const arma::vec& CS_beta, const arma::mat& y_pts, const arma::vec& eta_initial, const size_t& iter_max, const double& step_rate, const size_t& step_max, const double& tol);
RcppExport SEXP _MYHfusionRcpp_ADCS_EXsubY_Gamma_SolveLagrange_rcpp(SEXP XSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP nuSEXP, SEXP phiSEXP, SEXP CS_betaSEXP, SEXP y_ptsSEXP, SEXP eta_initialSEXP, SEXP iter_maxSEXP, SEXP step_rateSEXP, SEXP step_maxSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type CS_beta(CS_betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type y_pts(y_ptsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type eta_initial(eta_initialSEXP);
    Rcpp::traits::input_parameter< const size_t& >::type iter_max(iter_maxSEXP);
    Rcpp::traits::input_parameter< const double& >::type step_rate(step_rateSEXP);
    Rcpp::traits::input_parameter< const size_t& >::type step_max(step_maxSEXP);
    Rcpp::traits::input_parameter< const double& >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(ADCS_EXsubY_Gamma_SolveLagrange_rcpp(X, alpha, beta, nu, phi, CS_beta, y_pts, eta_initial, iter_max, step_rate, step_max, tol));
    return rcpp_result_gen;
END_RCPP
}
// ADCS_EYsubX_Gamma_Lagrange_rcpp
List ADCS_EYsubX_Gamma_Lagrange_rcpp(const arma::mat& X, const double& alpha, const arma::vec& beta, const double& nu, const arma::vec& phi, const arma::vec& CS_beta, const arma::umat& inclusion, const arma::vec& eta);
RcppExport SEXP _MYHfusionRcpp_ADCS_EYsubX_Gamma_Lagrange_rcpp(SEXP XSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP nuSEXP, SEXP phiSEXP, SEXP CS_betaSEXP, SEXP inclusionSEXP, SEXP etaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type CS_beta(CS_betaSEXP);
    Rcpp::traits::input_parameter< const arma::umat& >::type inclusion(inclusionSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type eta(etaSEXP);
    rcpp_result_gen = Rcpp::wrap(ADCS_EYsubX_Gamma_Lagrange_rcpp(X, alpha, beta, nu, phi, CS_beta, inclusion, eta));
    return rcpp_result_gen;
END_RCPP
}
// ADCS_EYsubX_Gamma_SolveLagrange_rcpp
List ADCS_EYsubX_Gamma_SolveLagrange_rcpp(const arma::mat& X, const double& alpha, const arma::vec& beta, const double& nu, const arma::vec& phi, const arma::vec& CS_beta, const arma::umat& inclusion, const arma::vec& eta_initial, const size_t& iter_max, const double& step_rate, const size_t& step_max, const double& tol);
RcppExport SEXP _MYHfusionRcpp_ADCS_EYsubX_Gamma_SolveLagrange_rcpp(SEXP XSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP nuSEXP, SEXP phiSEXP, SEXP CS_betaSEXP, SEXP inclusionSEXP, SEXP eta_initialSEXP, SEXP iter_maxSEXP, SEXP step_rateSEXP, SEXP step_maxSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type CS_beta(CS_betaSEXP);
    Rcpp::traits::input_parameter< const arma::umat& >::type inclusion(inclusionSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type eta_initial(eta_initialSEXP);
    Rcpp::traits::input_parameter< const size_t& >::type iter_max(iter_maxSEXP);
    Rcpp::traits::input_parameter< const double& >::type step_rate(step_rateSEXP);
    Rcpp::traits::input_parameter< const size_t& >::type step_max(step_maxSEXP);
    Rcpp::traits::input_parameter< const double& >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(ADCS_EYsubX_Gamma_SolveLagrange_rcpp(X, alpha, beta, nu, phi, CS_beta, inclusion, eta_initial, iter_max, step_rate, step_max, tol));
    return rcpp_result_gen;
END_RCPP
}
// AD_EXsubY_logistic_Lagrange_rcpp
List AD_EXsubY_logistic_Lagrange_rcpp(const arma::mat& X, const double& alpha, const arma::vec& beta, const arma::mat& phi, const arma::vec& eta);
RcppExport SEXP _MYHfusionRcpp_AD_EXsubY_logistic_Lagrange_rcpp(SEXP XSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP phiSEXP, SEXP etaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type eta(etaSEXP);
    rcpp_result_gen = Rcpp::wrap(AD_EXsubY_logistic_Lagrange_rcpp(X, alpha, beta, phi, eta));
    return rcpp_result_gen;
END_RCPP
}
// AD_EXsubY_logistic_SolveLagrange_rcpp
List AD_EXsubY_logistic_SolveLagrange_rcpp(const arma::mat& X, const double& alpha, const arma::vec& beta, const arma::mat& phi, const arma::vec& eta_initial, const size_t& iter_max, const double& step_rate, const size_t& step_max, const double& tol);
RcppExport SEXP _MYHfusionRcpp_AD_EXsubY_logistic_SolveLagrange_rcpp(SEXP XSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP phiSEXP, SEXP eta_initialSEXP, SEXP iter_maxSEXP, SEXP step_rateSEXP, SEXP step_maxSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type eta_initial(eta_initialSEXP);
    Rcpp::traits::input_parameter< const size_t& >::type iter_max(iter_maxSEXP);
    Rcpp::traits::input_parameter< const double& >::type step_rate(step_rateSEXP);
    Rcpp::traits::input_parameter< const size_t& >::type step_max(step_maxSEXP);
    Rcpp::traits::input_parameter< const double& >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(AD_EXsubY_logistic_SolveLagrange_rcpp(X, alpha, beta, phi, eta_initial, iter_max, step_rate, step_max, tol));
    return rcpp_result_gen;
END_RCPP
}
// AD_EYsubX_logistic_Lagrange_rcpp
List AD_EYsubX_logistic_Lagrange_rcpp(const arma::mat& X, const double& alpha, const arma::vec& beta, const arma::vec& phi, const arma::umat& inclusion, const arma::vec& eta);
RcppExport SEXP _MYHfusionRcpp_AD_EYsubX_logistic_Lagrange_rcpp(SEXP XSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP phiSEXP, SEXP inclusionSEXP, SEXP etaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const arma::umat& >::type inclusion(inclusionSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type eta(etaSEXP);
    rcpp_result_gen = Rcpp::wrap(AD_EYsubX_logistic_Lagrange_rcpp(X, alpha, beta, phi, inclusion, eta));
    return rcpp_result_gen;
END_RCPP
}
// AD_EYsubX_logistic_SolveLagrange_rcpp
List AD_EYsubX_logistic_SolveLagrange_rcpp(const arma::mat& X, const double& alpha, const arma::vec& beta, const arma::vec& phi, const arma::umat& inclusion, const arma::vec& eta_initial, const size_t& iter_max, const double& step_rate, const size_t& step_max, const double& tol);
RcppExport SEXP _MYHfusionRcpp_AD_EYsubX_logistic_SolveLagrange_rcpp(SEXP XSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP phiSEXP, SEXP inclusionSEXP, SEXP eta_initialSEXP, SEXP iter_maxSEXP, SEXP step_rateSEXP, SEXP step_maxSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const arma::umat& >::type inclusion(inclusionSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type eta_initial(eta_initialSEXP);
    Rcpp::traits::input_parameter< const size_t& >::type iter_max(iter_maxSEXP);
    Rcpp::traits::input_parameter< const double& >::type step_rate(step_rateSEXP);
    Rcpp::traits::input_parameter< const size_t& >::type step_max(step_maxSEXP);
    Rcpp::traits::input_parameter< const double& >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(AD_EYsubX_logistic_SolveLagrange_rcpp(X, alpha, beta, phi, inclusion, eta_initial, iter_max, step_rate, step_max, tol));
    return rcpp_result_gen;
END_RCPP
}
// ADPPS_EX_logistic_Lagrange_rcpp
List ADPPS_EX_logistic_Lagrange_rcpp(const arma::mat& X, const double& alpha, const arma::vec& beta, const arma::vec& phi, const double& PPS_beta, const arma::vec& eta);
RcppExport SEXP _MYHfusionRcpp_ADPPS_EX_logistic_Lagrange_rcpp(SEXP XSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP phiSEXP, SEXP PPS_betaSEXP, SEXP etaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const double& >::type PPS_beta(PPS_betaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type eta(etaSEXP);
    rcpp_result_gen = Rcpp::wrap(ADPPS_EX_logistic_Lagrange_rcpp(X, alpha, beta, phi, PPS_beta, eta));
    return rcpp_result_gen;
END_RCPP
}
// ADPPS_EX_logistic_SolveLagrange_rcpp
List ADPPS_EX_logistic_SolveLagrange_rcpp(const arma::mat& X, const double& alpha, const arma::vec& beta, const arma::vec& phi, const double& PPS_beta, const arma::vec& eta_initial, const size_t& iter_max, const double& step_rate, const size_t& step_max, const double& tol);
RcppExport SEXP _MYHfusionRcpp_ADPPS_EX_logistic_SolveLagrange_rcpp(SEXP XSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP phiSEXP, SEXP PPS_betaSEXP, SEXP eta_initialSEXP, SEXP iter_maxSEXP, SEXP step_rateSEXP, SEXP step_maxSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const double& >::type PPS_beta(PPS_betaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type eta_initial(eta_initialSEXP);
    Rcpp::traits::input_parameter< const size_t& >::type iter_max(iter_maxSEXP);
    Rcpp::traits::input_parameter< const double& >::type step_rate(step_rateSEXP);
    Rcpp::traits::input_parameter< const size_t& >::type step_max(step_maxSEXP);
    Rcpp::traits::input_parameter< const double& >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(ADPPS_EX_logistic_SolveLagrange_rcpp(X, alpha, beta, phi, PPS_beta, eta_initial, iter_max, step_rate, step_max, tol));
    return rcpp_result_gen;
END_RCPP
}
// ADPPS_EY_logistic_Lagrange_rcpp
List ADPPS_EY_logistic_Lagrange_rcpp(const arma::mat& X, const double& alpha, const arma::vec& beta, const double& phi, const double& PPS_beta, const double& eta);
RcppExport SEXP _MYHfusionRcpp_ADPPS_EY_logistic_Lagrange_rcpp(SEXP XSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP phiSEXP, SEXP PPS_betaSEXP, SEXP etaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const double& >::type PPS_beta(PPS_betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type eta(etaSEXP);
    rcpp_result_gen = Rcpp::wrap(ADPPS_EY_logistic_Lagrange_rcpp(X, alpha, beta, phi, PPS_beta, eta));
    return rcpp_result_gen;
END_RCPP
}
// ADPPS_EY_logistic_SolveLagrange_rcpp
List ADPPS_EY_logistic_SolveLagrange_rcpp(const arma::mat& X, const double& alpha, const arma::vec& beta, const double& phi, const double& PPS_beta, const double& eta_initial, const size_t& iter_max, const double& step_rate, const size_t& step_max, const double& tol);
RcppExport SEXP _MYHfusionRcpp_ADPPS_EY_logistic_SolveLagrange_rcpp(SEXP XSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP phiSEXP, SEXP PPS_betaSEXP, SEXP eta_initialSEXP, SEXP iter_maxSEXP, SEXP step_rateSEXP, SEXP step_maxSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const double& >::type PPS_beta(PPS_betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type eta_initial(eta_initialSEXP);
    Rcpp::traits::input_parameter< const size_t& >::type iter_max(iter_maxSEXP);
    Rcpp::traits::input_parameter< const double& >::type step_rate(step_rateSEXP);
    Rcpp::traits::input_parameter< const size_t& >::type step_max(step_maxSEXP);
    Rcpp::traits::input_parameter< const double& >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(ADPPS_EY_logistic_SolveLagrange_rcpp(X, alpha, beta, phi, PPS_beta, eta_initial, iter_max, step_rate, step_max, tol));
    return rcpp_result_gen;
END_RCPP
}
// ADPPS_EYsubX_logistic_Lagrange_rcpp
List ADPPS_EYsubX_logistic_Lagrange_rcpp(const arma::mat& X, const double& alpha, const arma::vec& beta, const arma::vec& phi, const double& PPS_beta, const arma::umat& inclusion, const arma::vec& eta);
RcppExport SEXP _MYHfusionRcpp_ADPPS_EYsubX_logistic_Lagrange_rcpp(SEXP XSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP phiSEXP, SEXP PPS_betaSEXP, SEXP inclusionSEXP, SEXP etaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const double& >::type PPS_beta(PPS_betaSEXP);
    Rcpp::traits::input_parameter< const arma::umat& >::type inclusion(inclusionSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type eta(etaSEXP);
    rcpp_result_gen = Rcpp::wrap(ADPPS_EYsubX_logistic_Lagrange_rcpp(X, alpha, beta, phi, PPS_beta, inclusion, eta));
    return rcpp_result_gen;
END_RCPP
}
// ADPPS_EYsubX_logistic_SolveLagrange_rcpp
List ADPPS_EYsubX_logistic_SolveLagrange_rcpp(const arma::mat& X, const double& alpha, const arma::vec& beta, const arma::vec& phi, const double& PPS_beta, const arma::umat& inclusion, const arma::vec& eta_initial, const size_t& iter_max, const double& step_rate, const size_t& step_max, const double& tol);
RcppExport SEXP _MYHfusionRcpp_ADPPS_EYsubX_logistic_SolveLagrange_rcpp(SEXP XSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP phiSEXP, SEXP PPS_betaSEXP, SEXP inclusionSEXP, SEXP eta_initialSEXP, SEXP iter_maxSEXP, SEXP step_rateSEXP, SEXP step_maxSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const double& >::type PPS_beta(PPS_betaSEXP);
    Rcpp::traits::input_parameter< const arma::umat& >::type inclusion(inclusionSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type eta_initial(eta_initialSEXP);
    Rcpp::traits::input_parameter< const size_t& >::type iter_max(iter_maxSEXP);
    Rcpp::traits::input_parameter< const double& >::type step_rate(step_rateSEXP);
    Rcpp::traits::input_parameter< const size_t& >::type step_max(step_maxSEXP);
    Rcpp::traits::input_parameter< const double& >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(ADPPS_EYsubX_logistic_SolveLagrange_rcpp(X, alpha, beta, phi, PPS_beta, inclusion, eta_initial, iter_max, step_rate, step_max, tol));
    return rcpp_result_gen;
END_RCPP
}
// ADCS_EY_logistic_Lagrange_rcpp
List ADCS_EY_logistic_Lagrange_rcpp(const arma::mat& X, const double& alpha, const arma::vec& beta, const double& phi, const arma::vec& CS_beta, const double& eta);
RcppExport SEXP _MYHfusionRcpp_ADCS_EY_logistic_Lagrange_rcpp(SEXP XSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP phiSEXP, SEXP CS_betaSEXP, SEXP etaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type CS_beta(CS_betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type eta(etaSEXP);
    rcpp_result_gen = Rcpp::wrap(ADCS_EY_logistic_Lagrange_rcpp(X, alpha, beta, phi, CS_beta, eta));
    return rcpp_result_gen;
END_RCPP
}
// ADCS_EY_logistic_SolveLagrange_rcpp
List ADCS_EY_logistic_SolveLagrange_rcpp(const arma::mat& X, const double& alpha, const arma::vec& beta, const double& phi, const arma::vec& CS_beta, const double& eta_initial, const size_t& iter_max, const double& step_rate, const size_t& step_max, const double& tol);
RcppExport SEXP _MYHfusionRcpp_ADCS_EY_logistic_SolveLagrange_rcpp(SEXP XSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP phiSEXP, SEXP CS_betaSEXP, SEXP eta_initialSEXP, SEXP iter_maxSEXP, SEXP step_rateSEXP, SEXP step_maxSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type CS_beta(CS_betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type eta_initial(eta_initialSEXP);
    Rcpp::traits::input_parameter< const size_t& >::type iter_max(iter_maxSEXP);
    Rcpp::traits::input_parameter< const double& >::type step_rate(step_rateSEXP);
    Rcpp::traits::input_parameter< const size_t& >::type step_max(step_maxSEXP);
    Rcpp::traits::input_parameter< const double& >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(ADCS_EY_logistic_SolveLagrange_rcpp(X, alpha, beta, phi, CS_beta, eta_initial, iter_max, step_rate, step_max, tol));
    return rcpp_result_gen;
END_RCPP
}
// ADCS_EXsubY_logistic_Lagrange_rcpp
List ADCS_EXsubY_logistic_Lagrange_rcpp(const arma::mat& X, const double& alpha, const arma::vec& beta, const arma::mat& phi, const arma::vec& CS_beta, const arma::vec& eta);
RcppExport SEXP _MYHfusionRcpp_ADCS_EXsubY_logistic_Lagrange_rcpp(SEXP XSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP phiSEXP, SEXP CS_betaSEXP, SEXP etaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type CS_beta(CS_betaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type eta(etaSEXP);
    rcpp_result_gen = Rcpp::wrap(ADCS_EXsubY_logistic_Lagrange_rcpp(X, alpha, beta, phi, CS_beta, eta));
    return rcpp_result_gen;
END_RCPP
}
// ADCS_EXsubY_logistic_SolveLagrange_rcpp
List ADCS_EXsubY_logistic_SolveLagrange_rcpp(const arma::mat& X, const double& alpha, const arma::vec& beta, const arma::mat& phi, const arma::vec& CS_beta, const arma::vec& eta_initial, const size_t& iter_max, const double& step_rate, const size_t& step_max, const double& tol);
RcppExport SEXP _MYHfusionRcpp_ADCS_EXsubY_logistic_SolveLagrange_rcpp(SEXP XSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP phiSEXP, SEXP CS_betaSEXP, SEXP eta_initialSEXP, SEXP iter_maxSEXP, SEXP step_rateSEXP, SEXP step_maxSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type CS_beta(CS_betaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type eta_initial(eta_initialSEXP);
    Rcpp::traits::input_parameter< const size_t& >::type iter_max(iter_maxSEXP);
    Rcpp::traits::input_parameter< const double& >::type step_rate(step_rateSEXP);
    Rcpp::traits::input_parameter< const size_t& >::type step_max(step_maxSEXP);
    Rcpp::traits::input_parameter< const double& >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(ADCS_EXsubY_logistic_SolveLagrange_rcpp(X, alpha, beta, phi, CS_beta, eta_initial, iter_max, step_rate, step_max, tol));
    return rcpp_result_gen;
END_RCPP
}
// ADCS_EYsubX_logistic_Lagrange_rcpp
List ADCS_EYsubX_logistic_Lagrange_rcpp(const arma::mat& X, const double& alpha, const arma::vec& beta, const arma::vec& phi, const arma::vec& CS_beta, const arma::umat& inclusion, const arma::vec& eta);
RcppExport SEXP _MYHfusionRcpp_ADCS_EYsubX_logistic_Lagrange_rcpp(SEXP XSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP phiSEXP, SEXP CS_betaSEXP, SEXP inclusionSEXP, SEXP etaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type CS_beta(CS_betaSEXP);
    Rcpp::traits::input_parameter< const arma::umat& >::type inclusion(inclusionSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type eta(etaSEXP);
    rcpp_result_gen = Rcpp::wrap(ADCS_EYsubX_logistic_Lagrange_rcpp(X, alpha, beta, phi, CS_beta, inclusion, eta));
    return rcpp_result_gen;
END_RCPP
}
// ADCS_EYsubX_logistic_SolveLagrange_rcpp
List ADCS_EYsubX_logistic_SolveLagrange_rcpp(const arma::mat& X, const double& alpha, const arma::vec& beta, const arma::vec& phi, const arma::vec& CS_beta, const arma::umat& inclusion, const arma::vec& eta_initial, const size_t& iter_max, const double& step_rate, const size_t& step_max, const double& tol);
RcppExport SEXP _MYHfusionRcpp_ADCS_EYsubX_logistic_SolveLagrange_rcpp(SEXP XSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP phiSEXP, SEXP CS_betaSEXP, SEXP inclusionSEXP, SEXP eta_initialSEXP, SEXP iter_maxSEXP, SEXP step_rateSEXP, SEXP step_maxSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type CS_beta(CS_betaSEXP);
    Rcpp::traits::input_parameter< const arma::umat& >::type inclusion(inclusionSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type eta_initial(eta_initialSEXP);
    Rcpp::traits::input_parameter< const size_t& >::type iter_max(iter_maxSEXP);
    Rcpp::traits::input_parameter< const double& >::type step_rate(step_rateSEXP);
    Rcpp::traits::input_parameter< const size_t& >::type step_max(step_maxSEXP);
    Rcpp::traits::input_parameter< const double& >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(ADCS_EYsubX_logistic_SolveLagrange_rcpp(X, alpha, beta, phi, CS_beta, inclusion, eta_initial, iter_max, step_rate, step_max, tol));
    return rcpp_result_gen;
END_RCPP
}
// pinv_rcpp
arma::mat pinv_rcpp(const arma::mat& M_A);
RcppExport SEXP _MYHfusionRcpp_pinv_rcpp(SEXP M_ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type M_A(M_ASEXP);
    rcpp_result_gen = Rcpp::wrap(pinv_rcpp(M_A));
    return rcpp_result_gen;
END_RCPP
}
// solve_rcpp
arma::mat solve_rcpp(const arma::mat& M_A, const arma::mat& M_B);
RcppExport SEXP _MYHfusionRcpp_solve_rcpp(SEXP M_ASEXP, SEXP M_BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type M_A(M_ASEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type M_B(M_BSEXP);
    rcpp_result_gen = Rcpp::wrap(solve_rcpp(M_A, M_B));
    return rcpp_result_gen;
END_RCPP
}
// inv_sympd_rcpp
arma::mat inv_sympd_rcpp(const arma::mat& M_S);
RcppExport SEXP _MYHfusionRcpp_inv_sympd_rcpp(SEXP M_SSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type M_S(M_SSEXP);
    rcpp_result_gen = Rcpp::wrap(inv_sympd_rcpp(M_S));
    return rcpp_result_gen;
END_RCPP
}
// eigen_rcpp
List eigen_rcpp(const arma::mat& M_S);
RcppExport SEXP _MYHfusionRcpp_eigen_rcpp(SEXP M_SSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type M_S(M_SSEXP);
    rcpp_result_gen = Rcpp::wrap(eigen_rcpp(M_S));
    return rcpp_result_gen;
END_RCPP
}
// chol_rcpp
arma::mat chol_rcpp(const arma::mat& M_S);
RcppExport SEXP _MYHfusionRcpp_chol_rcpp(SEXP M_SSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type M_S(M_SSEXP);
    rcpp_result_gen = Rcpp::wrap(chol_rcpp(M_S));
    return rcpp_result_gen;
END_RCPP
}
// rcond_rcpp
double rcond_rcpp(const arma::mat& A);
RcppExport SEXP _MYHfusionRcpp_rcond_rcpp(SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(rcond_rcpp(A));
    return rcpp_result_gen;
END_RCPP
}
// GroupSum_rcpp
arma::mat GroupSum_rcpp(const arma::mat& MM, const arma::uvec& id);
RcppExport SEXP _MYHfusionRcpp_GroupSum_rcpp(SEXP MMSEXP, SEXP idSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type MM(MMSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type id(idSEXP);
    rcpp_result_gen = Rcpp::wrap(GroupSum_rcpp(MM, id));
    return rcpp_result_gen;
END_RCPP
}
// eXsq_rcpp
arma::mat eXsq_rcpp(const arma::mat& data_X);
RcppExport SEXP _MYHfusionRcpp_eXsq_rcpp(SEXP data_XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type data_X(data_XSEXP);
    rcpp_result_gen = Rcpp::wrap(eXsq_rcpp(data_X));
    return rcpp_result_gen;
END_RCPP
}
// eXsq_w_rcpp
arma::mat eXsq_w_rcpp(const arma::mat& data_X, const arma::vec& weight);
RcppExport SEXP _MYHfusionRcpp_eXsq_w_rcpp(SEXP data_XSEXP, SEXP weightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type data_X(data_XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weight(weightSEXP);
    rcpp_result_gen = Rcpp::wrap(eXsq_w_rcpp(data_X, weight));
    return rcpp_result_gen;
END_RCPP
}
// Xsq_lowtri_rcpp
arma::mat Xsq_lowtri_rcpp(const arma::mat& data_X);
RcppExport SEXP _MYHfusionRcpp_Xsq_lowtri_rcpp(SEXP data_XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type data_X(data_XSEXP);
    rcpp_result_gen = Rcpp::wrap(Xsq_lowtri_rcpp(data_X));
    return rcpp_result_gen;
END_RCPP
}
// twoXYsym_lowtri_rcpp
arma::mat twoXYsym_lowtri_rcpp(const arma::mat& data_X, const arma::mat& data_Y);
RcppExport SEXP _MYHfusionRcpp_twoXYsym_lowtri_rcpp(SEXP data_XSEXP, SEXP data_YSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type data_X(data_XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type data_Y(data_YSEXP);
    rcpp_result_gen = Rcpp::wrap(twoXYsym_lowtri_rcpp(data_X, data_Y));
    return rcpp_result_gen;
END_RCPP
}
// ctingP_rcpp
arma::mat ctingP_rcpp(const arma::mat& Y, const arma::mat& y);
RcppExport SEXP _MYHfusionRcpp_ctingP_rcpp(SEXP YSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(ctingP_rcpp(Y, y));
    return rcpp_result_gen;
END_RCPP
}
// ctingP_uni_rcpp
arma::mat ctingP_uni_rcpp(const arma::vec& Y, const arma::vec& y);
RcppExport SEXP _MYHfusionRcpp_ctingP_uni_rcpp(SEXP YSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(ctingP_uni_rcpp(Y, y));
    return rcpp_result_gen;
END_RCPP
}
// countAinB_rcpp
arma::vec countAinB_rcpp(const arma::vec& A, const arma::vec& B);
RcppExport SEXP _MYHfusionRcpp_countAinB_rcpp(SEXP ASEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(countAinB_rcpp(A, B));
    return rcpp_result_gen;
END_RCPP
}
// countAinB_W_rcpp
arma::vec countAinB_W_rcpp(const arma::vec& A, const arma::vec& B, const arma::vec& W_B);
RcppExport SEXP _MYHfusionRcpp_countAinB_W_rcpp(SEXP ASEXP, SEXP BSEXP, SEXP W_BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type B(BSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type W_B(W_BSEXP);
    rcpp_result_gen = Rcpp::wrap(countAinB_W_rcpp(A, B, W_B));
    return rcpp_result_gen;
END_RCPP
}
// rankAinB_rcpp
arma::vec rankAinB_rcpp(const arma::vec& A, const arma::vec& B);
RcppExport SEXP _MYHfusionRcpp_rankAinB_rcpp(SEXP ASEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(rankAinB_rcpp(A, B));
    return rcpp_result_gen;
END_RCPP
}
// rankAinB_W_rcpp
arma::vec rankAinB_W_rcpp(const arma::vec& A, const arma::vec& B, const arma::vec& W_B);
RcppExport SEXP _MYHfusionRcpp_rankAinB_W_rcpp(SEXP ASEXP, SEXP BSEXP, SEXP W_BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type B(BSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type W_B(W_BSEXP);
    rcpp_result_gen = Rcpp::wrap(rankAinB_W_rcpp(A, B, W_B));
    return rcpp_result_gen;
END_RCPP
}
// outer_times_rcpp
arma::mat outer_times_rcpp(const arma::vec& a, const arma::vec& b);
RcppExport SEXP _MYHfusionRcpp_outer_times_rcpp(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(outer_times_rcpp(a, b));
    return rcpp_result_gen;
END_RCPP
}
// outer_minus_rcpp
arma::mat outer_minus_rcpp(const arma::vec& a, const arma::vec& b);
RcppExport SEXP _MYHfusionRcpp_outer_minus_rcpp(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(outer_minus_rcpp(a, b));
    return rcpp_result_gen;
END_RCPP
}
// outer_plus_rcpp
arma::mat outer_plus_rcpp(const arma::vec& a, const arma::vec& b);
RcppExport SEXP _MYHfusionRcpp_outer_plus_rcpp(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(outer_plus_rcpp(a, b));
    return rcpp_result_gen;
END_RCPP
}
// outer_leq_rcpp
arma::mat outer_leq_rcpp(const arma::vec& a, const arma::vec& b);
RcppExport SEXP _MYHfusionRcpp_outer_leq_rcpp(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(outer_leq_rcpp(a, b));
    return rcpp_result_gen;
END_RCPP
}
// outer_geq_rcpp
arma::mat outer_geq_rcpp(const arma::vec& a, const arma::vec& b);
RcppExport SEXP _MYHfusionRcpp_outer_geq_rcpp(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(outer_geq_rcpp(a, b));
    return rcpp_result_gen;
END_RCPP
}
// pinv_rcpp_v1
arma::mat pinv_rcpp_v1(const arma::mat& M_A);
RcppExport SEXP _MYHfusionRcpp_pinv_rcpp_v1(SEXP M_ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type M_A(M_ASEXP);
    rcpp_result_gen = Rcpp::wrap(pinv_rcpp_v1(M_A));
    return rcpp_result_gen;
END_RCPP
}
// pinv_rcpp_v2
arma::mat pinv_rcpp_v2(arma::mat M_A);
RcppExport SEXP _MYHfusionRcpp_pinv_rcpp_v2(SEXP M_ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type M_A(M_ASEXP);
    rcpp_result_gen = Rcpp::wrap(pinv_rcpp_v2(M_A));
    return rcpp_result_gen;
END_RCPP
}
// pinv_rcpp_v3
arma::mat pinv_rcpp_v3(arma::mat M_A);
RcppExport SEXP _MYHfusionRcpp_pinv_rcpp_v3(SEXP M_ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type M_A(M_ASEXP);
    rcpp_result_gen = Rcpp::wrap(pinv_rcpp_v3(M_A));
    return rcpp_result_gen;
END_RCPP
}
// pinv_rcpp_v4
arma::mat pinv_rcpp_v4(const arma::mat& M_A);
RcppExport SEXP _MYHfusionRcpp_pinv_rcpp_v4(SEXP M_ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type M_A(M_ASEXP);
    rcpp_result_gen = Rcpp::wrap(pinv_rcpp_v4(M_A));
    return rcpp_result_gen;
END_RCPP
}
// eigen_rcpp_v1
List eigen_rcpp_v1(const arma::mat& M_S);
RcppExport SEXP _MYHfusionRcpp_eigen_rcpp_v1(SEXP M_SSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type M_S(M_SSEXP);
    rcpp_result_gen = Rcpp::wrap(eigen_rcpp_v1(M_S));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_hello_world
arma::mat rcpparma_hello_world();
RcppExport SEXP _MYHfusionRcpp_rcpparma_hello_world() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(rcpparma_hello_world());
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_outerproduct
arma::mat rcpparma_outerproduct(const arma::colvec& x);
RcppExport SEXP _MYHfusionRcpp_rcpparma_outerproduct(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_outerproduct(x));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_innerproduct
double rcpparma_innerproduct(const arma::colvec& x);
RcppExport SEXP _MYHfusionRcpp_rcpparma_innerproduct(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_innerproduct(x));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_bothproducts
Rcpp::List rcpparma_bothproducts(const arma::colvec& x);
RcppExport SEXP _MYHfusionRcpp_rcpparma_bothproducts(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_bothproducts(x));
    return rcpp_result_gen;
END_RCPP
}
// testfunction_rcpp
arma::vec testfunction_rcpp(arma::vec a, Rcpp::Function my_r_func);
RcppExport SEXP _MYHfusionRcpp_testfunction_rcpp(SEXP aSEXP, SEXP my_r_funcSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type a(aSEXP);
    Rcpp::traits::input_parameter< Rcpp::Function >::type my_r_func(my_r_funcSEXP);
    rcpp_result_gen = Rcpp::wrap(testfunction_rcpp(a, my_r_func));
    return rcpp_result_gen;
END_RCPP
}
// KME_rcpp
arma::vec KME_rcpp(const arma::vec& time_last, const arma::uvec& is_event, const arma::vec& time_event);
RcppExport SEXP _MYHfusionRcpp_KME_rcpp(SEXP time_lastSEXP, SEXP is_eventSEXP, SEXP time_eventSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type time_last(time_lastSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type is_event(is_eventSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type time_event(time_eventSEXP);
    rcpp_result_gen = Rcpp::wrap(KME_rcpp(time_last, is_event, time_event));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_MYHfusionRcpp_K2_Ep_rcpp", (DL_FUNC) &_MYHfusionRcpp_K2_Ep_rcpp, 1},
    {"_MYHfusionRcpp_K2_Ep_diff1_rcpp", (DL_FUNC) &_MYHfusionRcpp_K2_Ep_diff1_rcpp, 1},
    {"_MYHfusionRcpp_K2_Ep_diff2_rcpp", (DL_FUNC) &_MYHfusionRcpp_K2_Ep_diff2_rcpp, 1},
    {"_MYHfusionRcpp_K2_Bw_rcpp", (DL_FUNC) &_MYHfusionRcpp_K2_Bw_rcpp, 1},
    {"_MYHfusionRcpp_K2_Bw_diff1_rcpp", (DL_FUNC) &_MYHfusionRcpp_K2_Bw_diff1_rcpp, 1},
    {"_MYHfusionRcpp_K2_Bw_diff2_rcpp", (DL_FUNC) &_MYHfusionRcpp_K2_Bw_diff2_rcpp, 1},
    {"_MYHfusionRcpp_K4_Bw_rcpp", (DL_FUNC) &_MYHfusionRcpp_K4_Bw_rcpp, 1},
    {"_MYHfusionRcpp_K4_Bw_diff1_rcpp", (DL_FUNC) &_MYHfusionRcpp_K4_Bw_diff1_rcpp, 1},
    {"_MYHfusionRcpp_K4_Bw_diff2_rcpp", (DL_FUNC) &_MYHfusionRcpp_K4_Bw_diff2_rcpp, 1},
    {"_MYHfusionRcpp_KDE_K2Ep_rcpp", (DL_FUNC) &_MYHfusionRcpp_KDE_K2Ep_rcpp, 3},
    {"_MYHfusionRcpp_KDE_K2Ep_w_rcpp", (DL_FUNC) &_MYHfusionRcpp_KDE_K2Ep_w_rcpp, 4},
    {"_MYHfusionRcpp_KDE_K2Bw_rcpp", (DL_FUNC) &_MYHfusionRcpp_KDE_K2Bw_rcpp, 3},
    {"_MYHfusionRcpp_KDE_K2Bw_w_rcpp", (DL_FUNC) &_MYHfusionRcpp_KDE_K2Bw_w_rcpp, 4},
    {"_MYHfusionRcpp_KDE_K4Bw_rcpp", (DL_FUNC) &_MYHfusionRcpp_KDE_K4Bw_rcpp, 3},
    {"_MYHfusionRcpp_KDE_K4Bw_w_rcpp", (DL_FUNC) &_MYHfusionRcpp_KDE_K4Bw_w_rcpp, 4},
    {"_MYHfusionRcpp_K2_Ep_rcpp_v1", (DL_FUNC) &_MYHfusionRcpp_K2_Ep_rcpp_v1, 1},
    {"_MYHfusionRcpp_lL_normal_rcpp", (DL_FUNC) &_MYHfusionRcpp_lL_normal_rcpp, 5},
    {"_MYHfusionRcpp_lL_normal_w_rcpp", (DL_FUNC) &_MYHfusionRcpp_lL_normal_w_rcpp, 6},
    {"_MYHfusionRcpp_diff_lL_normal_rcpp", (DL_FUNC) &_MYHfusionRcpp_diff_lL_normal_rcpp, 5},
    {"_MYHfusionRcpp_lL_logistic_rcpp", (DL_FUNC) &_MYHfusionRcpp_lL_logistic_rcpp, 4},
    {"_MYHfusionRcpp_lL_logistic_w_rcpp", (DL_FUNC) &_MYHfusionRcpp_lL_logistic_w_rcpp, 5},
    {"_MYHfusionRcpp_diff_lL_logistic_rcpp", (DL_FUNC) &_MYHfusionRcpp_diff_lL_logistic_rcpp, 4},
    {"_MYHfusionRcpp_lL_Gamma_rcpp", (DL_FUNC) &_MYHfusionRcpp_lL_Gamma_rcpp, 5},
    {"_MYHfusionRcpp_lL_Gamma_w_rcpp", (DL_FUNC) &_MYHfusionRcpp_lL_Gamma_w_rcpp, 6},
    {"_MYHfusionRcpp_diff_lL_Gamma_rcpp", (DL_FUNC) &_MYHfusionRcpp_diff_lL_Gamma_rcpp, 5},
    {"_MYHfusionRcpp_lL_binomial_rcpp", (DL_FUNC) &_MYHfusionRcpp_lL_binomial_rcpp, 5},
    {"_MYHfusionRcpp_lL_binomial_w_rcpp", (DL_FUNC) &_MYHfusionRcpp_lL_binomial_w_rcpp, 6},
    {"_MYHfusionRcpp_diff_lL_binomial_rcpp", (DL_FUNC) &_MYHfusionRcpp_diff_lL_binomial_rcpp, 5},
    {"_MYHfusionRcpp_lL_Poisson_rcpp", (DL_FUNC) &_MYHfusionRcpp_lL_Poisson_rcpp, 4},
    {"_MYHfusionRcpp_lL_Poisson_w_rcpp", (DL_FUNC) &_MYHfusionRcpp_lL_Poisson_w_rcpp, 5},
    {"_MYHfusionRcpp_diff_lL_Poisson_rcpp", (DL_FUNC) &_MYHfusionRcpp_diff_lL_Poisson_rcpp, 4},
    {"_MYHfusionRcpp_lL_normal_rcpp_fun", (DL_FUNC) &_MYHfusionRcpp_lL_normal_rcpp_fun, 5},
    {"_MYHfusionRcpp_lL_normal_w_rcpp_fun", (DL_FUNC) &_MYHfusionRcpp_lL_normal_w_rcpp_fun, 6},
    {"_MYHfusionRcpp_diff_lL_normal_rcpp_v1", (DL_FUNC) &_MYHfusionRcpp_diff_lL_normal_rcpp_v1, 5},
    {"_MYHfusionRcpp_AD_EY_normal_Lagrange_rcpp", (DL_FUNC) &_MYHfusionRcpp_AD_EY_normal_Lagrange_rcpp, 6},
    {"_MYHfusionRcpp_AD_EY_normal_SolveLagrange_rcpp", (DL_FUNC) &_MYHfusionRcpp_AD_EY_normal_SolveLagrange_rcpp, 10},
    {"_MYHfusionRcpp_AD_EY_normal_rcpp", (DL_FUNC) &_MYHfusionRcpp_AD_EY_normal_rcpp, 5},
    {"_MYHfusionRcpp_ADvar_EY_normal_rcpp", (DL_FUNC) &_MYHfusionRcpp_ADvar_EY_normal_rcpp, 6},
    {"_MYHfusionRcpp_AD_EXsubY_normal_Lagrange_rcpp", (DL_FUNC) &_MYHfusionRcpp_AD_EXsubY_normal_Lagrange_rcpp, 7},
    {"_MYHfusionRcpp_AD_EXsubY_normal_SolveLagrange_rcpp", (DL_FUNC) &_MYHfusionRcpp_AD_EXsubY_normal_SolveLagrange_rcpp, 11},
    {"_MYHfusionRcpp_AD_EXsubY_normal_rcpp", (DL_FUNC) &_MYHfusionRcpp_AD_EXsubY_normal_rcpp, 6},
    {"_MYHfusionRcpp_ADvar_EXsubY_normal_rcpp", (DL_FUNC) &_MYHfusionRcpp_ADvar_EXsubY_normal_rcpp, 7},
    {"_MYHfusionRcpp_AD_EYsubX_normal_Lagrange_rcpp", (DL_FUNC) &_MYHfusionRcpp_AD_EYsubX_normal_Lagrange_rcpp, 7},
    {"_MYHfusionRcpp_AD_EYsubX_normal_SolveLagrange_rcpp", (DL_FUNC) &_MYHfusionRcpp_AD_EYsubX_normal_SolveLagrange_rcpp, 11},
    {"_MYHfusionRcpp_AD_EYsubX_normal_rcpp", (DL_FUNC) &_MYHfusionRcpp_AD_EYsubX_normal_rcpp, 6},
    {"_MYHfusionRcpp_ADvar_EYsubX_normal_rcpp", (DL_FUNC) &_MYHfusionRcpp_ADvar_EYsubX_normal_rcpp, 7},
    {"_MYHfusionRcpp_ADCS_EY_normal_Lagrange_rcpp", (DL_FUNC) &_MYHfusionRcpp_ADCS_EY_normal_Lagrange_rcpp, 7},
    {"_MYHfusionRcpp_ADCS_EY_normal_SolveLagrange_rcpp", (DL_FUNC) &_MYHfusionRcpp_ADCS_EY_normal_SolveLagrange_rcpp, 11},
    {"_MYHfusionRcpp_ADCS_EY_normal_rcpp", (DL_FUNC) &_MYHfusionRcpp_ADCS_EY_normal_rcpp, 6},
    {"_MYHfusionRcpp_ADCSvar_EY_normal_rcpp", (DL_FUNC) &_MYHfusionRcpp_ADCSvar_EY_normal_rcpp, 7},
    {"_MYHfusionRcpp_ADCS_EXsubY_normal_Lagrange_rcpp", (DL_FUNC) &_MYHfusionRcpp_ADCS_EXsubY_normal_Lagrange_rcpp, 8},
    {"_MYHfusionRcpp_ADCS_EXsubY_normal_SolveLagrange_rcpp", (DL_FUNC) &_MYHfusionRcpp_ADCS_EXsubY_normal_SolveLagrange_rcpp, 12},
    {"_MYHfusionRcpp_ADCS_EXsubY_normal_rcpp", (DL_FUNC) &_MYHfusionRcpp_ADCS_EXsubY_normal_rcpp, 7},
    {"_MYHfusionRcpp_ADCSvar_EXsubY_normal_rcpp", (DL_FUNC) &_MYHfusionRcpp_ADCSvar_EXsubY_normal_rcpp, 8},
    {"_MYHfusionRcpp_ADCS_EYsubX_normal_Lagrange_rcpp", (DL_FUNC) &_MYHfusionRcpp_ADCS_EYsubX_normal_Lagrange_rcpp, 8},
    {"_MYHfusionRcpp_ADCS_EYsubX_normal_SolveLagrange_rcpp", (DL_FUNC) &_MYHfusionRcpp_ADCS_EYsubX_normal_SolveLagrange_rcpp, 12},
    {"_MYHfusionRcpp_ADCS_EYsubX_normal_rcpp", (DL_FUNC) &_MYHfusionRcpp_ADCS_EYsubX_normal_rcpp, 7},
    {"_MYHfusionRcpp_ADCSvar_EYsubX_normal_rcpp", (DL_FUNC) &_MYHfusionRcpp_ADCSvar_EYsubX_normal_rcpp, 8},
    {"_MYHfusionRcpp_ADPPS_EX_normal_Lagrange_rcpp", (DL_FUNC) &_MYHfusionRcpp_ADPPS_EX_normal_Lagrange_rcpp, 7},
    {"_MYHfusionRcpp_ADPPS_EX_normal_SolveLagrange_rcpp", (DL_FUNC) &_MYHfusionRcpp_ADPPS_EX_normal_SolveLagrange_rcpp, 11},
    {"_MYHfusionRcpp_ADPPS_EX_normal_rcpp", (DL_FUNC) &_MYHfusionRcpp_ADPPS_EX_normal_rcpp, 6},
    {"_MYHfusionRcpp_ADPPSvar_EX_normal_rcpp", (DL_FUNC) &_MYHfusionRcpp_ADPPSvar_EX_normal_rcpp, 7},
    {"_MYHfusionRcpp_ADPPS_EY_normal_Lagrange_rcpp", (DL_FUNC) &_MYHfusionRcpp_ADPPS_EY_normal_Lagrange_rcpp, 7},
    {"_MYHfusionRcpp_ADPPS_EY_normal_SolveLagrange_rcpp", (DL_FUNC) &_MYHfusionRcpp_ADPPS_EY_normal_SolveLagrange_rcpp, 11},
    {"_MYHfusionRcpp_ADPPS_EY_normal_rcpp", (DL_FUNC) &_MYHfusionRcpp_ADPPS_EY_normal_rcpp, 6},
    {"_MYHfusionRcpp_ADPPSvar_EY_normal_rcpp", (DL_FUNC) &_MYHfusionRcpp_ADPPSvar_EY_normal_rcpp, 7},
    {"_MYHfusionRcpp_ADPPS_EXsubY_normal_Lagrange_rcpp", (DL_FUNC) &_MYHfusionRcpp_ADPPS_EXsubY_normal_Lagrange_rcpp, 8},
    {"_MYHfusionRcpp_ADPPS_EXsubY_normal_SolveLagrange_rcpp", (DL_FUNC) &_MYHfusionRcpp_ADPPS_EXsubY_normal_SolveLagrange_rcpp, 12},
    {"_MYHfusionRcpp_ADPPS_EXsubY_normal_rcpp", (DL_FUNC) &_MYHfusionRcpp_ADPPS_EXsubY_normal_rcpp, 7},
    {"_MYHfusionRcpp_ADPPSvar_EXsubY_normal_rcpp", (DL_FUNC) &_MYHfusionRcpp_ADPPSvar_EXsubY_normal_rcpp, 8},
    {"_MYHfusionRcpp_ADPPS_EYsubX_normal_Lagrange_rcpp", (DL_FUNC) &_MYHfusionRcpp_ADPPS_EYsubX_normal_Lagrange_rcpp, 8},
    {"_MYHfusionRcpp_ADPPS_EYsubX_normal_SolveLagrange_rcpp", (DL_FUNC) &_MYHfusionRcpp_ADPPS_EYsubX_normal_SolveLagrange_rcpp, 12},
    {"_MYHfusionRcpp_ADPPS_EYsubX_normal_rcpp", (DL_FUNC) &_MYHfusionRcpp_ADPPS_EYsubX_normal_rcpp, 7},
    {"_MYHfusionRcpp_ADPPSvar_EYsubX_normal_rcpp", (DL_FUNC) &_MYHfusionRcpp_ADPPSvar_EYsubX_normal_rcpp, 8},
    {"_MYHfusionRcpp_AD_EY_logistic_Lagrange_rcpp", (DL_FUNC) &_MYHfusionRcpp_AD_EY_logistic_Lagrange_rcpp, 5},
    {"_MYHfusionRcpp_AD_EY_logistic_SolveLagrange_rcpp", (DL_FUNC) &_MYHfusionRcpp_AD_EY_logistic_SolveLagrange_rcpp, 9},
    {"_MYHfusionRcpp_AD_EY_logistic_rcpp", (DL_FUNC) &_MYHfusionRcpp_AD_EY_logistic_rcpp, 4},
    {"_MYHfusionRcpp_ADvar_EY_logistic_rcpp", (DL_FUNC) &_MYHfusionRcpp_ADvar_EY_logistic_rcpp, 5},
    {"_MYHfusionRcpp_AD_EY_Gamma_Lagrange_rcpp", (DL_FUNC) &_MYHfusionRcpp_AD_EY_Gamma_Lagrange_rcpp, 6},
    {"_MYHfusionRcpp_AD_EY_Gamma_SolveLagrange_rcpp", (DL_FUNC) &_MYHfusionRcpp_AD_EY_Gamma_SolveLagrange_rcpp, 10},
    {"_MYHfusionRcpp_AD_EY_Gamma_rcpp", (DL_FUNC) &_MYHfusionRcpp_AD_EY_Gamma_rcpp, 5},
    {"_MYHfusionRcpp_AD_EXsubY_Gamma_Lagrange_rcpp", (DL_FUNC) &_MYHfusionRcpp_AD_EXsubY_Gamma_Lagrange_rcpp, 7},
    {"_MYHfusionRcpp_AD_EXsubY_Gamma_SolveLagrange_rcpp", (DL_FUNC) &_MYHfusionRcpp_AD_EXsubY_Gamma_SolveLagrange_rcpp, 11},
    {"_MYHfusionRcpp_AD_EXsubY_Gamma_rcpp", (DL_FUNC) &_MYHfusionRcpp_AD_EXsubY_Gamma_rcpp, 6},
    {"_MYHfusionRcpp_AD_EYsubX_Gamma_Lagrange_rcpp", (DL_FUNC) &_MYHfusionRcpp_AD_EYsubX_Gamma_Lagrange_rcpp, 7},
    {"_MYHfusionRcpp_AD_EYsubX_Gamma_SolveLagrange_rcpp", (DL_FUNC) &_MYHfusionRcpp_AD_EYsubX_Gamma_SolveLagrange_rcpp, 11},
    {"_MYHfusionRcpp_ADPPS_EX_Gamma_Lagrange_rcpp", (DL_FUNC) &_MYHfusionRcpp_ADPPS_EX_Gamma_Lagrange_rcpp, 7},
    {"_MYHfusionRcpp_ADPPS_EX_Gamma_SolveLagrange_rcpp", (DL_FUNC) &_MYHfusionRcpp_ADPPS_EX_Gamma_SolveLagrange_rcpp, 11},
    {"_MYHfusionRcpp_ADPPS_EY_Gamma_Lagrange_rcpp", (DL_FUNC) &_MYHfusionRcpp_ADPPS_EY_Gamma_Lagrange_rcpp, 7},
    {"_MYHfusionRcpp_ADPPS_EY_Gamma_SolveLagrange_rcpp", (DL_FUNC) &_MYHfusionRcpp_ADPPS_EY_Gamma_SolveLagrange_rcpp, 11},
    {"_MYHfusionRcpp_ADPPS_EXsubY_Gamma_Lagrange_rcpp", (DL_FUNC) &_MYHfusionRcpp_ADPPS_EXsubY_Gamma_Lagrange_rcpp, 8},
    {"_MYHfusionRcpp_ADPPS_EXsubY_Gamma_SolveLagrange_rcpp", (DL_FUNC) &_MYHfusionRcpp_ADPPS_EXsubY_Gamma_SolveLagrange_rcpp, 12},
    {"_MYHfusionRcpp_ADPPS_EYsubX_Gamma_Lagrange_rcpp", (DL_FUNC) &_MYHfusionRcpp_ADPPS_EYsubX_Gamma_Lagrange_rcpp, 8},
    {"_MYHfusionRcpp_ADPPS_EYsubX_Gamma_SolveLagrange_rcpp", (DL_FUNC) &_MYHfusionRcpp_ADPPS_EYsubX_Gamma_SolveLagrange_rcpp, 12},
    {"_MYHfusionRcpp_ADCS_EY_Gamma_Lagrange_rcpp", (DL_FUNC) &_MYHfusionRcpp_ADCS_EY_Gamma_Lagrange_rcpp, 7},
    {"_MYHfusionRcpp_ADCS_EY_Gamma_SolveLagrange_rcpp", (DL_FUNC) &_MYHfusionRcpp_ADCS_EY_Gamma_SolveLagrange_rcpp, 11},
    {"_MYHfusionRcpp_ADCS_EXsubY_Gamma_Lagrange_rcpp", (DL_FUNC) &_MYHfusionRcpp_ADCS_EXsubY_Gamma_Lagrange_rcpp, 8},
    {"_MYHfusionRcpp_ADCS_EXsubY_Gamma_SolveLagrange_rcpp", (DL_FUNC) &_MYHfusionRcpp_ADCS_EXsubY_Gamma_SolveLagrange_rcpp, 12},
    {"_MYHfusionRcpp_ADCS_EYsubX_Gamma_Lagrange_rcpp", (DL_FUNC) &_MYHfusionRcpp_ADCS_EYsubX_Gamma_Lagrange_rcpp, 8},
    {"_MYHfusionRcpp_ADCS_EYsubX_Gamma_SolveLagrange_rcpp", (DL_FUNC) &_MYHfusionRcpp_ADCS_EYsubX_Gamma_SolveLagrange_rcpp, 12},
    {"_MYHfusionRcpp_AD_EXsubY_logistic_Lagrange_rcpp", (DL_FUNC) &_MYHfusionRcpp_AD_EXsubY_logistic_Lagrange_rcpp, 5},
    {"_MYHfusionRcpp_AD_EXsubY_logistic_SolveLagrange_rcpp", (DL_FUNC) &_MYHfusionRcpp_AD_EXsubY_logistic_SolveLagrange_rcpp, 9},
    {"_MYHfusionRcpp_AD_EYsubX_logistic_Lagrange_rcpp", (DL_FUNC) &_MYHfusionRcpp_AD_EYsubX_logistic_Lagrange_rcpp, 6},
    {"_MYHfusionRcpp_AD_EYsubX_logistic_SolveLagrange_rcpp", (DL_FUNC) &_MYHfusionRcpp_AD_EYsubX_logistic_SolveLagrange_rcpp, 10},
    {"_MYHfusionRcpp_ADPPS_EX_logistic_Lagrange_rcpp", (DL_FUNC) &_MYHfusionRcpp_ADPPS_EX_logistic_Lagrange_rcpp, 6},
    {"_MYHfusionRcpp_ADPPS_EX_logistic_SolveLagrange_rcpp", (DL_FUNC) &_MYHfusionRcpp_ADPPS_EX_logistic_SolveLagrange_rcpp, 10},
    {"_MYHfusionRcpp_ADPPS_EY_logistic_Lagrange_rcpp", (DL_FUNC) &_MYHfusionRcpp_ADPPS_EY_logistic_Lagrange_rcpp, 6},
    {"_MYHfusionRcpp_ADPPS_EY_logistic_SolveLagrange_rcpp", (DL_FUNC) &_MYHfusionRcpp_ADPPS_EY_logistic_SolveLagrange_rcpp, 10},
    {"_MYHfusionRcpp_ADPPS_EYsubX_logistic_Lagrange_rcpp", (DL_FUNC) &_MYHfusionRcpp_ADPPS_EYsubX_logistic_Lagrange_rcpp, 7},
    {"_MYHfusionRcpp_ADPPS_EYsubX_logistic_SolveLagrange_rcpp", (DL_FUNC) &_MYHfusionRcpp_ADPPS_EYsubX_logistic_SolveLagrange_rcpp, 11},
    {"_MYHfusionRcpp_ADCS_EY_logistic_Lagrange_rcpp", (DL_FUNC) &_MYHfusionRcpp_ADCS_EY_logistic_Lagrange_rcpp, 6},
    {"_MYHfusionRcpp_ADCS_EY_logistic_SolveLagrange_rcpp", (DL_FUNC) &_MYHfusionRcpp_ADCS_EY_logistic_SolveLagrange_rcpp, 10},
    {"_MYHfusionRcpp_ADCS_EXsubY_logistic_Lagrange_rcpp", (DL_FUNC) &_MYHfusionRcpp_ADCS_EXsubY_logistic_Lagrange_rcpp, 6},
    {"_MYHfusionRcpp_ADCS_EXsubY_logistic_SolveLagrange_rcpp", (DL_FUNC) &_MYHfusionRcpp_ADCS_EXsubY_logistic_SolveLagrange_rcpp, 10},
    {"_MYHfusionRcpp_ADCS_EYsubX_logistic_Lagrange_rcpp", (DL_FUNC) &_MYHfusionRcpp_ADCS_EYsubX_logistic_Lagrange_rcpp, 7},
    {"_MYHfusionRcpp_ADCS_EYsubX_logistic_SolveLagrange_rcpp", (DL_FUNC) &_MYHfusionRcpp_ADCS_EYsubX_logistic_SolveLagrange_rcpp, 11},
    {"_MYHfusionRcpp_pinv_rcpp", (DL_FUNC) &_MYHfusionRcpp_pinv_rcpp, 1},
    {"_MYHfusionRcpp_solve_rcpp", (DL_FUNC) &_MYHfusionRcpp_solve_rcpp, 2},
    {"_MYHfusionRcpp_inv_sympd_rcpp", (DL_FUNC) &_MYHfusionRcpp_inv_sympd_rcpp, 1},
    {"_MYHfusionRcpp_eigen_rcpp", (DL_FUNC) &_MYHfusionRcpp_eigen_rcpp, 1},
    {"_MYHfusionRcpp_chol_rcpp", (DL_FUNC) &_MYHfusionRcpp_chol_rcpp, 1},
    {"_MYHfusionRcpp_rcond_rcpp", (DL_FUNC) &_MYHfusionRcpp_rcond_rcpp, 1},
    {"_MYHfusionRcpp_GroupSum_rcpp", (DL_FUNC) &_MYHfusionRcpp_GroupSum_rcpp, 2},
    {"_MYHfusionRcpp_eXsq_rcpp", (DL_FUNC) &_MYHfusionRcpp_eXsq_rcpp, 1},
    {"_MYHfusionRcpp_eXsq_w_rcpp", (DL_FUNC) &_MYHfusionRcpp_eXsq_w_rcpp, 2},
    {"_MYHfusionRcpp_Xsq_lowtri_rcpp", (DL_FUNC) &_MYHfusionRcpp_Xsq_lowtri_rcpp, 1},
    {"_MYHfusionRcpp_twoXYsym_lowtri_rcpp", (DL_FUNC) &_MYHfusionRcpp_twoXYsym_lowtri_rcpp, 2},
    {"_MYHfusionRcpp_ctingP_rcpp", (DL_FUNC) &_MYHfusionRcpp_ctingP_rcpp, 2},
    {"_MYHfusionRcpp_ctingP_uni_rcpp", (DL_FUNC) &_MYHfusionRcpp_ctingP_uni_rcpp, 2},
    {"_MYHfusionRcpp_countAinB_rcpp", (DL_FUNC) &_MYHfusionRcpp_countAinB_rcpp, 2},
    {"_MYHfusionRcpp_countAinB_W_rcpp", (DL_FUNC) &_MYHfusionRcpp_countAinB_W_rcpp, 3},
    {"_MYHfusionRcpp_rankAinB_rcpp", (DL_FUNC) &_MYHfusionRcpp_rankAinB_rcpp, 2},
    {"_MYHfusionRcpp_rankAinB_W_rcpp", (DL_FUNC) &_MYHfusionRcpp_rankAinB_W_rcpp, 3},
    {"_MYHfusionRcpp_outer_times_rcpp", (DL_FUNC) &_MYHfusionRcpp_outer_times_rcpp, 2},
    {"_MYHfusionRcpp_outer_minus_rcpp", (DL_FUNC) &_MYHfusionRcpp_outer_minus_rcpp, 2},
    {"_MYHfusionRcpp_outer_plus_rcpp", (DL_FUNC) &_MYHfusionRcpp_outer_plus_rcpp, 2},
    {"_MYHfusionRcpp_outer_leq_rcpp", (DL_FUNC) &_MYHfusionRcpp_outer_leq_rcpp, 2},
    {"_MYHfusionRcpp_outer_geq_rcpp", (DL_FUNC) &_MYHfusionRcpp_outer_geq_rcpp, 2},
    {"_MYHfusionRcpp_pinv_rcpp_v1", (DL_FUNC) &_MYHfusionRcpp_pinv_rcpp_v1, 1},
    {"_MYHfusionRcpp_pinv_rcpp_v2", (DL_FUNC) &_MYHfusionRcpp_pinv_rcpp_v2, 1},
    {"_MYHfusionRcpp_pinv_rcpp_v3", (DL_FUNC) &_MYHfusionRcpp_pinv_rcpp_v3, 1},
    {"_MYHfusionRcpp_pinv_rcpp_v4", (DL_FUNC) &_MYHfusionRcpp_pinv_rcpp_v4, 1},
    {"_MYHfusionRcpp_eigen_rcpp_v1", (DL_FUNC) &_MYHfusionRcpp_eigen_rcpp_v1, 1},
    {"_MYHfusionRcpp_rcpparma_hello_world", (DL_FUNC) &_MYHfusionRcpp_rcpparma_hello_world, 0},
    {"_MYHfusionRcpp_rcpparma_outerproduct", (DL_FUNC) &_MYHfusionRcpp_rcpparma_outerproduct, 1},
    {"_MYHfusionRcpp_rcpparma_innerproduct", (DL_FUNC) &_MYHfusionRcpp_rcpparma_innerproduct, 1},
    {"_MYHfusionRcpp_rcpparma_bothproducts", (DL_FUNC) &_MYHfusionRcpp_rcpparma_bothproducts, 1},
    {"_MYHfusionRcpp_testfunction_rcpp", (DL_FUNC) &_MYHfusionRcpp_testfunction_rcpp, 2},
    {"_MYHfusionRcpp_KME_rcpp", (DL_FUNC) &_MYHfusionRcpp_KME_rcpp, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_MYHfusionRcpp(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
